blas (3m_blas)	     - Reference BLAS
caxpy (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] CY:=CY+CA*CX (constant times a vector plus a vector)
ccopy (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] CY:=CX (copies elements of a vector x to a vector y)
cdotc (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] CDOTC := SUM CONJUGATE(CX) * CY (conjugated vector dot product)
cdotu (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] CDOTU := SUM CX * CY (unconjugated vector dot product)
cgbmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A is a rectangular band matrix).
cgemm (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*B+beta*C; ==> A, B, C rectangular.
cgemv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a rectangular matrix.
cgerc (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-TRANSPOSE(CY); ==> A is a rectangular matrix.
cgeru (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*TRANSPOSE(CY); ==> A is a rectangular matrix.
chbmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a (square) hermitian band matrix.
chemm (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C; ==> A hermitian, B, C rectangular.
chemv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a (square) hermitian matrix.
cher (3m_blas)	     - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-TRANSPOSE(CX); ==> A a (square) hermitian matrix. (performs the hermitian rank 1 operation)
cher2 (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-TRANSPOSE(CY)n + CONJUGATE(alpha)*CY*CONJUGATE-TRANSPOSE(CX); ==> n A a (square) hermitian matrix. (performs the hermitian rank 2 operation)
cher2k (3m_blas)     - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C; ==> C hermitian. (performs one of the hermitian rank 2k operations)
cherk (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] performs one of the hermitian rank k operations C:=alpha*A*TRANSPOSE(A)+beta*C, C hermitian.
chpmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY, A a (square) hermitian packed matrix.
chpr (3m_blas)	     - [BLAS:COMPLEX_BLAS_LEVEL2] performs the hermitian rank 1 operation A := A + alpha*CX*CONJUGATE-TRANSPOSE(CX), a a (square) hermitian packed.
chpr2 (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] performs the hermitian rank 2 operation A := A + alpha*CX*CONJUGATE-TRANSPOSE(CY)n + CONJUGATE(ALPHA)*CY*CONJUGATE-TRANSPOSE(CX), n A a (square) hermitian packed matrix.
crotg (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] Generate a hermitian Given's rotation.
cscal (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] scales a vector by a constant. CX:=CA*CX (complex multiplier)
csrot (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] Applies a real Given's rotation to complex vectors.
csscal (3m_blas)     - [BLAS:COMPLEX_BLAS_LEVEL1] CSSCAL scales a complex vector by a real constant. CX:=SA*CX (real multiplier).
cswap (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL1] Interchange vectors CX and CY.
csymm (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A symmetric, B, C rectangular.
csyr2k (3m_blas)     - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C, C symmetric.
csyrk (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C, C symmetric.
ctbmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a triangular band matrix.
ctbsv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a triangular band matrix.
ctpmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a packed triangular band matrix.
ctpsv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a packed triangular band matrix.
ctrmm (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] B:=A*B or B:=B*A, A triangular, B rectangular.
ctrmv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a triangular matrix.
ctrsm (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL3] B:=INVERSE(A)*C or B:=C*INVERSE(A), B, C rectangular, A triangular.
ctrsv (3m_blas)      - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a triangular matrix.
dasum (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1] takes the sum of the absolute values.
daxpy (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1] constant times a vector plus a vector.
dcabs1 (3m_blas)     - [BLAS:DOUBLE_BLAS_LEVEL1] DCABS1 computes |Re(.)| + |Im(.)| of a double complex number
dcopy (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1] copies elements of a vector, x, to a vector, y.
ddot (3m_blas)	     - [BLAS:DOUBLE_BLAS_LEVEL1] forms the dot product of two vectors.
dgbmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dgemm (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dgemv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dger (3m_blas)	     - [BLAS:DOUBLE_BLAS_LEVEL2]
dnrm2 (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] returns the euclidean norm of a vector via the function name
drot (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL1] DROT applies a plane rotation.
drotg (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] constructs a plane rotation
drotm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] Apply the Modified Givens Transformation, H, to the 2 by N matrix
drotmg (3m_blas)     - [BLAS:DOUBLE_BLAS_LEVEL1]
dsbmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dscal (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1] scales a vector by a constant.
dsdot (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1]
dspmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dspr (3m_blas)	     - [BLAS:DOUBLE_BLAS_LEVEL2]
dspr2 (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dswap (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1] interchanges two vectors.
dsymm (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dsymv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dsyr (3m_blas)	     - [BLAS:DOUBLE_BLAS_LEVEL3]
dsyr2 (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dsyr2k (3m_blas)     - [BLAS:DOUBLE_BLAS_LEVEL3]
dsyrk (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtbmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtbsv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtpmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtpsv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dtrmm (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtrmv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL2]
dtrsm (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL3]
dtrsv (3m_blas)      - [BLAS:DOUBLE_BLAS_LEVEL1]
dzasum (3m_blas)     - [BLAS:DOUBLE_BLAS_LEVEL1]
dznrm2 (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1]
icamax (3m_blas)     - [BLAS:AUX_BLAS] Return index of maximum "absolute value" in CX.
idamax (3m_blas)     - [BLAS:AUX_BLAS]
isamax (3m_blas)     - [BLAS:AUX_BLAS] Return index of maximum absolute value in SX.
izamax (3m_blas)     - [BLAS:AUX_BLAS]
lsame (3m_blas)      - [BLAS:AUX_BLAS] compare two letters ignoring case
sasum (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] SASUM:=sum of absolute values of SX.
saxpy (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] SY:=SY+SA*SX (constant times a vector plus a vector)
scabs1 (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1]
scasum (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1] SCASUM:=SUM(I=1 to N) ABS(REAL(CX(I)))+ABS(AIMAG(CX(I))).
scnrm2 (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1] SCNRM2:= square root of sum of magnitudes of entries of CX.
scopy (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] SY:=SX
sdot (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL1] SDOT := SUM SX * SY (vector dot product)
sdsdot (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1] Compute the inner product of two vectors with extended precision accumulation. SDSDOT := SUM SX * SY (accumulated double precision, returned single)
sgbmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a band matrix.
sgemm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A, B, C rectangular.
sgemv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a rectangular matrix.
sger (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SY), rank 1 update, A a rectangular matrix.
snrm2 (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] SNRM2 := square root of sum of SX(I)**2
srot (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL1] Apply Given's rotation.
srotg (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] Generate Given's rotation.
srotm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] Apply a modified Given's rotation.
srotmg (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL1] Generate a modified Given's rotation.
ssbmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a symmetric band matrix.
sscal (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] SX:=SA*SX.
sspmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a packed symmetric matrix.
sspr (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SX), A a packed symmetric matrix.
sspr2 (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SY)+alpha*SY*TRANSPOSE(SX), A packed symmetric.
sswap (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL1] Interchange vectors SX and SY.
ssymm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A symmetric, B, C rectangular.
ssymv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a symmetric matrix.
ssyr (3m_blas)	     - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SX), A a symmetric matrix.
ssyr2 (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SY)+alpha*SY*TRANSPOSE(SX), A a symmetric
ssyr2k (3m_blas)     - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C, C symmetric.
ssyrk (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C, C symmetric.
stbmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a triangular band matrix.
stbsv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a triangular band matrix.
stpmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a packed symmetric matrix.
stpsv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a packed symmetric matrix.
strmm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL3] B:=A*B or B:=B*A, A triangular, B rectangular.
strmv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a triangular matrix.
strsm (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL3] B:=INVERSE(A)*C or B:=C*INVERSE(A), B, C rectangular, A triangular.
strsv (3m_blas)      - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a triangular matrix.
xerbla (3m_blas)     - [BLAS:AUX_BLAS] error handler routine for the BLAS/LAPACK routines
xerbla_array (3m_blas) - [BLAS:AUX_BLAS] call XERBLA(3f) with an array of characters instead of a string
zaxpy (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1] ZY := ZY+ZA*ZX complex constant times a complex vector plus a complex vector.
zcopy (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zdotc (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zdotu (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zdrot (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zdscal (3m_blas)     - [BLAS:COMPLEX16_BLAS_LEVEL1]
zgbmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zgemm (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
zgemv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zgerc (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zgeru (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zhbmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zhemm (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
zhemv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zher (3m_blas)	     - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zher2 (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zher2k (3m_blas)     - [BLAS:COMPLEX16_BLAS_LEVEL3]
zherk (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
zhpmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zhpr (3m_blas)	     - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zhpr2 (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
zrotg (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1] constructs a plane rotation
zscal (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zswap (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL1]
zsymm (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
zsyr2k (3m_blas)     - [BLAS:COMPLEX16_BLAS_LEVEL3]
zsyrk (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
ztbmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
ztbsv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
ztpmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
ztpsv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
ztrmm (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL3]
ztrmv (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL2]
ztrsm (3m_blas)      - [BLAS:COMPLEX_16_BLAS_LEVEL3]
ztrsv (3m_blas)      - [BLAS:COMPLEX16_BLAS_LEVEL2]
saxpy(3m_blas)							saxpy(3m_blas)



NAME
  saxpy(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SY:=SY+SA*SX (constant times a vector
  plus a vector)


SYNOPSIS
  subroutine saxpy(n,sa,sx,incx,sy,incy)

	.. Scalar Arguments ..
	real,intent(in)     :: sa
	integer,intent(in)  :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in)     :: sx(*)
	real,intent(inout)  :: sy(*)
	..


DEFINITION
  SAXPY constant times a vector plus a vector.	uses unrolled loops for
  increments equal to one.

OPTIONS
   N
  number of elements in input vector(s)

   SA
  On entry, SA specifies the scalar alpha.

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  storage spacing between elements of SY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			saxpy(3m_blas)
scabs1(3m_blas) 					       scabs1(3m_blas)



NAME
  scabs1(3f) - [BLAS:SINGLE_BLAS_LEVEL1]


SYNOPSIS
  elemental real function scabs1(z)

	.. Scalar Arguments ..
	complex,intent(in) ::  z
	..


DEFINITION
  SCABS1 computes |Re(.)| + |Im(.)| of a complex number

OPTIONS
   Z
  Z is COMPLEX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       scabs1(3m_blas)
scasum(3m_blas) 					       scasum(3m_blas)



NAME
  scasum(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SCASUM:=SUM(I=1 to N)
  ABS(REAL(CX(I)))+ABS(AIMAG(CX(I))).


SYNOPSIS
  real function scasum(n,cx,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: cx(*)
	..


DEFINITION
  SCASUM takes the sum of the (|Re(.)| + |Im(.)|)'s of a complex vector and
  returns a single precision result.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   CX
  CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       scasum(3m_blas)
scnrm2(3m_blas) 					       scnrm2(3m_blas)



NAME
  scnrm2(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SCNRM2:= square root of sum of
  magnitudes of entries of CX.


SYNOPSIS
  real function scnrm2(n,x,incx)

       ..
       .. Scalar Arguments ..
       integer,intent(in) :: incx, n
       ..
       .. Array Arguments ..
       complex(wp),intent(in) :: x(*)
       ..


DEFINITION
  SCNRM2 returns the euclidean norm of a vector via the function name, so that

      SCNRM2 := sqrt( x**H*x )


OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   X
  X is COMPLEX array, dimension (N) complex vector with N elements

   INCX
  INCX is INTEGER, storage spacing between elements of X If INCX > 0,
  X(1+(i-1)*INCX) = x(i) for 1 <= i <= n If INCX < 0, X(1-(n-i)*INCX) = x(i)
  for 1 <= i <= n If INCX = 0, x isn't a vector so there is no need to call
  this subroutine. If you call it anyway, it will count x(1) in the vector
  norm N times.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   date:August 2016

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

  Blue, James L. (1978) A Portable Fortran Program to Find the Euclidean Norm
  of a Vector ACM Trans Math Softw 4:15--23
  https://doi.org/10.1145/355769.355771

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       scnrm2(3m_blas)
scopy(3m_blas)							scopy(3m_blas)



NAME
  scopy(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SY:=SX


SYNOPSIS
  subroutine scopy(n,sx,incx,sy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in)  :: sx(*)
	real,intent(out) :: sy(*)
	..


DEFINITION
  SCOPY copies a vector, x, to a vector, y.  uses unrolled loops for
  increments equal to 1.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of SY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			scopy(3m_blas)
sdot(3m_blas)							 sdot(3m_blas)



NAME
  sdot(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SDOT := SUM SX * SY (vector dot
  product)


SYNOPSIS
  real function sdot(n,sx,incx,sy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in) :: sx(*),sy(*)
	..


DEFINITION
  SDOT forms the dot product of two vectors.  uses unrolled loops for
  increments equal to one.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of SY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 sdot(3m_blas)
sdsdot(3m_blas) 					       sdsdot(3m_blas)



NAME
  sdsdot(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Compute the inner product of two
  vectors with extended precision accumulation.  SDSDOT := SUM SX * SY
  (accumulated double precision, returned single)


SYNOPSIS
  real function sdsdot(n,sb,sx,incx,sy,incy)

	.. Scalar Arguments ..
	real,intent(in) :: sb
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in) :: sx(*),sy(*)
	..


DEFINITION
  Compute the inner product of two vectors with extended precision
  accumulation.

  Returns S.P. result with dot product accumulated in D.P.  SDSDOT = SB + sum
  for I = 0 to N-1 of SX(LX+I*INCX)*SY(LY+I*INCY), where LX = 1 if INCX .GE.
  0, else LX = 1+(1-N)*INCX, and LY is defined in a similar way using INCY.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SB
  SB is REAL single precision scalar to be added to inner product

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) ) single precision
  vector with N elements

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) ) single precision
  vector with N elements

   INCY
  INCY is INTEGER storage spacing between elements of SY

AUTHORS
  •  Lawson, C. L., (JPL), Hanson, R. J., (SNLA),

  •  Kincaid, D. R., (U. of Texas), Krogh, F. T., (JPL)

  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
   REFERENCES
  C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.  Krogh, Basic linear
  algebra subprograms for Fortran usage, Algorithm No. 539, Transactions on
  Mathematical Software 5, 3 (September 1979), pp. 308-323.

  REVISION HISTORY (YYMMDD)

  791001
    DATE WRITTEN

  890531
    Changed all specific intrinsics to generic.  (WRB)

  890831
    Modified array declarations.  (WRB)

  890831
    REVISION DATE from Version 3.2

  891214
    Prologue converted to Version 4.0 format.  (BAB)

  920310
    Corrected definition of LX in DESCRIPTION.	(WRB)

  920501
    Reformatted the REFERENCES section.  (WRB)

  070118
    Reformat to LAPACK coding style

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       sdsdot(3m_blas)
sgbmv(3m_blas)							sgbmv(3m_blas)



NAME
  sgbmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a band
  matrix.


SYNOPSIS
  subroutine sgbmv(trans,m,n,kl,ku,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	real,intent(in) 	    :: alpha,beta
	integer,intent(in)	    :: incx,incy,kl,ku,lda,m,n
	character(len=1),intent(in) :: trans
	..
	.. Array Arguments ..
	real,intent(in)    :: a(lda,*),x(*)
	real,intent(inout) :: y(*)
	..


DEFINITION
  SGBMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  band matrix, with kl sub-diagonals and ku super-diagonals.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**T*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   KL
  KL is INTEGER On entry, KL specifies the number of sub-diagonals of the
  matrix A. KL must satisfy 0 .le. KL.

   KU
  KU is INTEGER On entry, KU specifies the number of super-diagonals of the
  matrix A. KU must satisfy 0 .le. KU.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, N ) Before entry, the leading ( kl + ku +
  1 ) by n part of the array A must contain the matrix of coefficients,
  supplied column by column, with the leading diagonal of the matrix in row (
  ku + 1 ) of the array, the first super-diagonal starting at position 2 in
  row ku, the first sub-diagonal starting at position 1 in row ( ku + 2 ), and
  so on.  Elements in the array A that do not correspond to elements in the
  band matrix (such as the top left ku by ku triangle) are not referenced.
  The following program segment will transfer a band matrix from conventional
  full matrix storage to band storage:

		   DO 20, J = 1, N
		      K = KU + 1 - J
		      DO 10, I = MAX( 1, J - KU ), MIN( M, J + KL )
			 A( K + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( kl + ku + 1 ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ) when TRANS
  = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.  Before
  entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then Y need not be set on input.

   Y
  Y is REAL array, dimension at least ( 1 + ( m - 1 )*abs( INCY ) ) when TRANS
  = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.  Before
  entry, the incremented array Y must contain the vector y. On exit, Y is
  overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sgbmv(3m_blas)
sgemm(3m_blas)							sgemm(3m_blas)



NAME
  sgemm(3f) - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A, B, C
  rectangular.


SYNOPSIS
  subroutine sgemm(transa,transb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: k,lda,ldb,ldc,m,n
	character,intent(in) :: transa,transb
	..
	.. Array Arguments ..
	real,intent(in)    :: a(lda,*),b(ldb,*)
	real,intent(inout) :: c(ldc,*)
	..


DEFINITION
  SGEMM performs one of the matrix-matrix operations

      C := alpha*op( A )*op( B ) + beta*C,

  where op( X ) is one of

      op( X ) = X   or	 op( X ) = X**T,

  alpha and beta are scalars, and A, B and C are matrices, with op( A ) an m
  by k matrix, op( B ) a k by n matrix and C an m by n matrix.

OPTIONS
   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n',  op( A ) = A.

		TRANSA = 'T' or 't',  op( A ) = A**T.

		TRANSA = 'C' or 'c',  op( A ) = A**T.


   TRANSB
  TRANSB is CHARACTER*1 On entry, TRANSB specifies the form of op( B ) to be
  used in the matrix multiplication as follows:

		TRANSB = 'N' or 'n',  op( B ) = B.

		TRANSB = 'T' or 't',  op( B ) = B**T.

		TRANSB = 'C' or 'c',  op( B ) = B**T.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix op( A )
  and of the matrix C. M must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix op( B
  ) and the number of columns of the matrix C. N must be at least zero.

   K
  K is INTEGER On entry, K specifies the number of columns of the matrix op( A
  ) and the number of rows of the matrix op( B ). K must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, ka ), where ka is k when TRANSA = 'N' or
  'n', and is m otherwise.

    Before entry with TRANSA = 'N' or 'n', the leading m by k part of the
    array A must contain the matrix A, otherwise the leading k by m part of
    the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANSA = 'N' or 'n' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, k ).

   B
  B is REAL array, dimension ( LDB, kb ), where kb is n when TRANSB = 'N' or
  'n', and is k otherwise.

    Before entry with TRANSB = 'N' or 'n', the leading k by n part of the
    array B must contain the matrix B, otherwise the leading n by k part of
    the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANSB = 'N' or 'n' then LDB must be at
  least max( 1, k ), otherwise LDB must be at least max( 1, n ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then C need not be set on input.

   C
  C is REAL array, dimension ( LDC, N )

	     Before entry, the leading m by n part of the array C must
	     contain the matrix C, except when beta is zero, in which
	     case C need not be set on entry.

	     On exit, the array C is overwritten by the m by n matrix
	     ( alpha*op( A )*op( B ) + beta*C ).


   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sgemm(3m_blas)
sgemv(3m_blas)							sgemv(3m_blas)



NAME
  sgemv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a
  rectangular matrix.


SYNOPSIS
  subroutine sgemv(trans,m,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: incx,incy,lda,m,n
	character,intent(in) :: trans
	..
	.. Array Arguments ..
	real,intent(in)    :: a(lda,*),x(*)
	real,intent(inout) :: y(*)
	..


DEFINITION
  SGEMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  matrix.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**T*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, N ) Before entry, the leading m by n part
  of the array A must contain the matrix of coefficients.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ) when TRANS
  = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.  Before
  entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then Y need not be set on input.

   Y
  Y is REAL array, dimension at least ( 1 + ( m - 1 )*abs( INCY ) ) when TRANS
  = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.  Before
  entry with BETA non-zero, the incremented array Y must contain the vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sgemv(3m_blas)
sger(3m_blas)							 sger(3m_blas)



NAME
  sger(3f) - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SY), rank 1
  update, A a rectangular matrix.


SYNOPSIS
  subroutine sger(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	real,intent(in)    :: alpha
	integer,intent(in) :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	real,intent(in)    :: x(*),y(*)
	real,intent(inout) :: a(lda,*)
	..


DEFINITION
  SGER performs the rank 1 operation

      A := alpha*x*y**T + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is REAL array, dimension at least ( 1 + ( m - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the m element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is REAL array, dimension ( LDA, N ) Before entry, the leading m by n part
  of the array A must contain the matrix of coefficients. On exit, A is
  overwritten by the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 sger(3m_blas)
snrm2(3m_blas)							snrm2(3m_blas)



NAME
  snrm2(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SNRM2 := square root of sum of
  SX(I)**2


SYNOPSIS
  real function snrm2(n,x,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx, n
	..
	.. Array Arguments ..
	real(wp),intent(in) :: x(*)
	..


DEFINITION
  SNRM2 returns the euclidean norm of a vector via the function name, so that

      SNRM2 := sqrt( x'*x ).


OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   X
  X is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER, storage spacing between elements of X If INCX > 0,
  X(1+(i-1)*INCX) = x(i) for 1 <= i <= n If INCX < 0, X(1-(n-i)*INCX) = x(i)
  for 1 <= i <= n If INCX = 0, x isn't a vector so there is no need to call
  this subroutine. If you call it anyway, it will count x(1) in the vector
  norm N times.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   date:August 2016

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

  Blue, James L. (1978) A Portable Fortran Program to Find the Euclidean Norm
  of a Vector ACM Trans Math Softw 4:15--23
  https://doi.org/10.1145/355769.355771

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			snrm2(3m_blas)
srot(3m_blas)							 srot(3m_blas)



NAME
  srot(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Apply Given's rotation.


SYNOPSIS
  subroutine srot(n,sx,incx,sy,incy,c,s)

	.. Scalar Arguments ..
	real,intent(in)    :: c,s
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(inout) :: sx(*),sy(*)
	..


DEFINITION
  applies a plane rotation.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of SY

   C
  C is REAL

   S
  S is REAL

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 srot(3m_blas)
srotg(3m_blas)							srotg(3m_blas)



NAME
  srotg(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Generate Given's rotation.


SYNOPSIS
  subroutine srotg( a, b, c, s )

     .. Scalar Arguments ..
     real(wp),intent(inout) :: a, b
     real(wp),intent(out)   :: c, s
     ..
     .. Local Scalars ..
     real(wp) :: anorm, bnorm, scl, sigma, r, z
     ..


DEFINITION
  SROTG constructs a plane rotation

       [  c  s ] [ a ] = [ r ]
       [ -s  c ] [ b ]	 [ 0 ]

  satisfying c**2 + s**2 = 1.

  The computation uses the formulas

      sigma = sgn(a)	if |a| >  |b|
	    = sgn(b)	if |b| >= |a|
      r = sigma*sqrt( a**2 + b**2 )
      c = 1; s = 0	if r = 0
      c = a/r; s = b/r	if r != 0

  The subroutine also computes

      z = s    if |a| > |b|,
	= 1/c  if |b| >= |a| and c != 0
	= 1    if c = 0

  This allows c and s to be reconstructed from z as follows:

      If z = 1, set c = 0, s = 1.
      If |z| < 1, set c = sqrt(1 - z**2) and s = z.
      If |z| > 1, set c = 1/z and s = sqrt( 1 - c**2).


OPTIONS
   A
  A is REAL On entry, the scalar a.  On exit, the scalar r.

   B
  B is REAL On entry, the scalar b.  On exit, the scalar z.

   C
  C is REAL The scalar c.

   S
  S is REAL The scalar s.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			srotg(3m_blas)
srotm(3m_blas)							srotm(3m_blas)



NAME
  srotm(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Apply a modified Given's rotation.


SYNOPSIS
  subroutine srotm(n,sx,incx,sy,incy,sparam)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in)    :: sparam(5)
	real,intent(inout) :: sx(*),sy(*)
	..


DEFINITION
  APPLY THE MODIFIED GIVENS TRANSFORMATION, H, TO THE 2 BY N MATRIX

  (SX**T) , WHERE **T INDICATES TRANSPOSE. THE ELEMENTS OF SX ARE IN (SX**T)

  SX(LX+I*INCX), I = 0 TO N-1, WHERE LX = 1 IF INCX .GE. 0, ELSE LX =
  (-INCX)*N, AND SIMILARLY FOR SY USING USING LY AND INCY.  WITH
  SPARAM(1)=SFLAG, H HAS ONE OF THE FOLLOWING FORMS..

	 SFLAG=-1.E0	 SFLAG=0.E0	   SFLAG=1.E0	  SFLAG=-2.E0

	   (SH11  SH12)    (1.E0  SH12)    (SH11  1.E0)    (1.E0  0.E0)
	 H=(	      )    (	      )    (	      )    (	      )
	   (SH21  SH22),   (SH21  1.E0),   (-1.E0 SH22),   (0.E0  1.E0).


  SEE
    SROTMG FOR A DESCRIPTION OF DATA STORAGE IN SPARAM.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of SY

   SPARAM
  SPARAM is REAL array, dimension (5) SPARAM(1)=SFLAG SPARAM(2)=SH11
  SPARAM(3)=SH21 SPARAM(4)=SH12 SPARAM(5)=SH22

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			srotm(3m_blas)
srotmg(3m_blas) 					       srotmg(3m_blas)



NAME
  srotmg(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Generate a modified Given's rotation.


SYNOPSIS
  subroutine srotmg(sd1,sd2,sx1,sy1,sparam)

	.. Scalar Arguments ..
	real,intent(inout) :: sd1,sd2,sx1
	real,intent(in)    :: sy1
	..
	.. Array Arguments ..
	real,intent(out)   :: sparam(5)
	..


DEFINITION
  Construct the modified Givens Transformation Matrix H which zeros the second
  component of the 2-vector

       (sqrt(sd1)*sx1,sqrt(sd2)*>sy2)**t.

  with sparam(1)=sflag, H has one of the following forms..

	 SFLAG=-1.E0	 SFLAG=0.E0	   SFLAG=1.E0	  SFLAG=-2.E0

	   (SH11  SH12)    (1.E0  SH12)    (SH11  1.E0)    (1.E0  0.E0)
	 H=(	      )    (	      )    (	      )    (	      )
	   (SH21  SH22),   (SH21  1.E0),   (-1.E0 SH22),   (0.E0  1.E0).

  locations 2-4 of SPARAM contain SH11,SH21,SH12, and SH22 respectively.
  (values of 1.e0, -1.e0, or 0.e0 implied by the value of SPARAM(1) are not
  stored in SPARAM.)

  the values of GAMSQ and RGAMSQ set in the data statement may be inexact.
  This is OK as they are only used for testing the size of SD1 and SD2. All
  actual scaling of data is done using GAM.

OPTIONS
  SD1

	    SD1 is REAL

  SD2

	    SD2 is REAL

  SX1

	    SX1 is REAL

  SY1

	    SY1 is REAL


   SPARAM
  SPARAM is REAL array, dimension (5) SPARAM(1)=SFLAG SPARAM(2)=SH11
  SPARAM(3)=SH21 SPARAM(4)=SH12 SPARAM(5)=SH22

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       srotmg(3m_blas)
ssbmv(3m_blas)							ssbmv(3m_blas)



NAME
  ssbmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a symmetric
  band matrix.


SYNOPSIS
  subroutine ssbmv(uplo,n,k,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: incx,incy,k,lda,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*),x(*)
	real,intent(inout)   :: y(*)
	..


DEFINITION
  SSBMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric band matrix, with k super-diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the band matrix A is being supplied as follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    being supplied.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    being supplied.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry, K specifies the number of super-diagonals of the
  matrix A. K must satisfy 0 .le. K.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the symmetric matrix, supplied column by column,
  with the leading diagonal of the matrix in row ( k + 1 ) of the array, the
  first super-diagonal starting at position 2 in row k, and so on. The top
  left k by k triangle of the array A is not referenced.  The following
  program segment will transfer the upper triangular part of a symmetric band
  matrix from conventional full matrix storage to band storage:

		>    DO 20, J = 1, N
		>	M = K + 1 - J
		>	DO 10, I = MAX( 1, J - K ), J
		>	   A( M + I, J ) = matrix( I, J )
		> 10	CONTINUE
		> 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the symmetric matrix,
  supplied column by column, with the leading diagonal of the matrix in row 1
  of the array, the first sub-diagonal starting at position 1 in row 2, and so
  on. The bottom right k by k triangle of the array A is not referenced.  The
  following program segment will transfer the lower triangular part of a
  symmetric band matrix from conventional full matrix storage to band storage:

		>    DO 20, J = 1, N
		>	M = 1 - J
		>	DO 10, I = J, MIN( N, J + K )
		>	   A( M + I, J ) = matrix( I, J )
		> 10	CONTINUE
		> 20 CONTINUE


   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the vector y. On exit, Y is
  overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ssbmv(3m_blas)
sscal(3m_blas)							sscal(3m_blas)



NAME
  sscal(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SX:=SA*SX.


SYNOPSIS
  subroutine sscal(n,sa,sx,incx)

	.. Scalar Arguments ..
	real,intent(in)    :: sa
	integer,intent(in) :: incx,n
	..
	.. Array Arguments ..
	real,intent(inout) :: sx(*)
	..


DEFINITION
  SSCAL scales a vector by a constant.	uses unrolled loops for increment
  equal to 1.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SA
  SA is REAL On entry, SA specifies the scalar alpha.

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sscal(3m_blas)
sspmv(3m_blas)							sspmv(3m_blas)



NAME
  sspmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a packed
  symmetric matrix.


SYNOPSIS
  subroutine sspmv(uplo,n,alpha,ap,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: incx,incy,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: ap(*),x(*)
	real,intent(inout)   :: y(*)
	..


DEFINITION
  SSPMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   AP
  AP is REAL array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the symmetric matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular part of the symmetric matrix packed
  sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 )
  and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then Y need not be set on input.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the n element vector y. On exit,
  Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sspmv(3m_blas)
sspr(3m_blas)							 sspr(3m_blas)



NAME
  sspr(3f) - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SX), A a packed
  symmetric matrix.


SYNOPSIS
  subroutine sspr(uplo,n,alpha,x,incx,ap)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: incx,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)    :: x(*)
	real,intent(inout) :: ap(*)
	..


DEFINITION
  SSPR performs the symmetric rank 1 operation

      A := alpha*x*x**T + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   AP
  AP is REAL array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the symmetric matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on. On exit, the array AP is overwritten by the upper
  triangular part of the updated matrix.  Before entry with UPLO = 'L' or 'l',
  the array AP must contain the lower triangular part of the symmetric matrix
  packed sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ),
  AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.
  On exit, the array AP is overwritten by the lower triangular part of the
  updated matrix.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 sspr(3m_blas)
sspr2(3m_blas)							sspr2(3m_blas)



NAME
  sspr2(3f) - [BLAS:SINGLE_BLAS_LEVEL2]
  A:=A+alpha*SX*TRANSPOSE(SY)+alpha*SY*TRANSPOSE(SX), A packed symmetric.


SYNOPSIS
  subroutine sspr2(uplo,n,alpha,x,incx,y,incy,ap)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: incx,incy,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: x(*),y(*)
	real,intent(inout)   :: ap(*)
	..


DEFINITION
  SSPR2 performs the symmetric rank 2 operation

      A := alpha*x*y**T + alpha*y*x**T + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   AP
  AP is REAL array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the symmetric matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on. On exit, the array AP is overwritten by the upper
  triangular part of the updated matrix.  Before entry with UPLO = 'L' or 'l',
  the array AP must contain the lower triangular part of the symmetric matrix
  packed sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ),
  AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.
  On exit, the array AP is overwritten by the lower triangular part of the
  updated matrix.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sspr2(3m_blas)
sswap(3m_blas)							sswap(3m_blas)



NAME
  sswap(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Interchange vectors SX and SY.


SYNOPSIS
  subroutine sswap(n,sx,incx,sy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(inout) :: sx(*),sy(*)
	..


DEFINITION
  SSWAP interchanges two vectors.  uses unrolled loops for increments equal to
  1.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

   SY
  SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of SY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sswap(3m_blas)
ssymm(3m_blas)							ssymm(3m_blas)



NAME
  ssymm(3f) - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A symmetric, B, C
  rectangular.


SYNOPSIS
  subroutine ssymm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: lda,ldb,ldc,m,n
	character,intent(in) :: side,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*),b(ldb,*)
	real,intent(inout)   :: c(ldc,*)
	..


DEFINITION
  SSYMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is a symmetric matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the symmetric matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the symmetric matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    symmetric matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    symmetric matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, ka ), where ka is m when SIDE = 'L' or 'l'
  and is n otherwise.  Before entry with SIDE = 'L' or 'l', the m by m part of
  the array A must contain the symmetric matrix, such that when UPLO = 'U' or
  'u', the leading m by m upper triangular part of the array A must contain
  the upper triangular part of the symmetric matrix and the strictly lower
  triangular part of A is not referenced, and when UPLO = 'L' or 'l', the
  leading m by m lower triangular part of the array A must contain the lower
  triangular part of the symmetric matrix and the strictly upper triangular
  part of A is not referenced.	Before entry with SIDE = 'R' or 'r', the n by
  n part of the array A must contain the symmetric matrix, such that when UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of A is not referenced, and when UPLO = 'L' or 'l',
  the leading n by n lower triangular part of the array A must contain the
  lower triangular part of the symmetric matrix and the strictly upper
  triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is REAL array, dimension ( LDB, N ) Before entry, the leading m by n part
  of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then C need not be set on input.

   C
  C is REAL array, dimension ( LDC, N ) Before entry, the leading m by n part
  of the array C must contain the matrix C, except when beta is zero, in which
  case C need not be set on entry.  On exit, the array C is overwritten by the
  m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ssymm(3m_blas)
ssymv(3m_blas)							ssymv(3m_blas)



NAME
  ssymv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SY:=alpha*A*SX+beta*SY, A a symmetric
  matrix.


SYNOPSIS
  subroutine ssymv(uplo,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: incx,incy,lda,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*),x(*)
	real,intent(inout)   :: y(*)
	..


DEFINITION
  SSYMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array A must contain the
  upper triangular part of the symmetric matrix and the strictly lower
  triangular part of A is not referenced.  Before entry with UPLO = 'L' or
  'l', the leading n by n lower triangular part of the array A must contain
  the lower triangular part of the symmetric matrix and the strictly upper
  triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta. When BETA is supplied
  as zero then Y need not be set on input.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the n element vector y. On exit,
  Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ssymv(3m_blas)
ssyr(3m_blas)							 ssyr(3m_blas)



NAME
  ssyr(3f) - [BLAS:SINGLE_BLAS_LEVEL2] A:=A+alpha*SX*TRANSPOSE(SX), A a
  symmetric matrix.


SYNOPSIS
  subroutine ssyr(uplo,n,alpha,x,incx,a,lda)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: incx,lda,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: x(*)
	real,intent(inout)   :: a(lda,*)
	..


DEFINITION
  SSYR performs the symmetric rank 1 operation

      A := alpha*x*x**T + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array A must contain the
  upper triangular part of the symmetric matrix and the strictly lower
  triangular part of A is not referenced. On exit, the upper triangular part
  of the array A is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 ssyr(3m_blas)
ssyr2(3m_blas)							ssyr2(3m_blas)



NAME
  ssyr2(3f) - [BLAS:SINGLE_BLAS_LEVEL2]
  A:=A+alpha*SX*TRANSPOSE(SY)+alpha*SY*TRANSPOSE(SX), A a symmetric


SYNOPSIS
  subroutine ssyr2(uplo,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: incx,incy,lda,n
	character,intent(in) :: uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: x(*),y(*)
	real,intent(inout)   :: a(lda,*)
	..


DEFINITION
  SSYR2 performs the symmetric rank 2 operation

      A := alpha*x*y**T + alpha*y*x**T + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).  Before
  entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array A must contain the
  upper triangular part of the symmetric matrix and the strictly lower
  triangular part of A is not referenced. On exit, the upper triangular part
  of the array A is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ssyr2(3m_blas)
ssyr2k(3m_blas) 					       ssyr2k(3m_blas)



NAME
  ssyr2k(3f) - [BLAS:SINGLE_BLAS_LEVEL3]
  C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C, C symmetric.


SYNOPSIS
  subroutine ssyr2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: k,lda,ldb,ldc,n
	character,intent(in) :: trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*),b(ldb,*)
	real,intent(inout)   :: c(ldc,*)
	..


DEFINITION
  SSYR2K performs one of the symmetric rank 2k operations

      C := alpha*A*B**T + alpha*B*A**T + beta*C,

  or

      C := alpha*A**T*B + alpha*B**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A and
  B are n by k matrices in the first case and k by n matrices in the second
  case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*B**T + alpha*B*A**T +
					  beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*B + alpha*B**T*A +
					  beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**T*B + alpha*B**T*A +
					  beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'T' or 't' or 'C'
  or 'c', K specifies the number of rows of the matrices A and B. K must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is REAL array, dimension ( LDB, kb ), where kb is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array B must contain the matrix B, otherwise the leading
  k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta.

   C
  C is REAL array, dimension ( LDC, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array C must contain the
  upper triangular part of the symmetric matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       ssyr2k(3m_blas)
ssyrk(3m_blas)							ssyrk(3m_blas)



NAME
  ssyrk(3f) - [BLAS:SINGLE_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C, C
  symmetric.


SYNOPSIS
  subroutine ssyrk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha,beta
	integer,intent(in)   :: k,lda,ldc,n
	character,intent(in) :: trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*)
	real,intent(inout)   :: c(ldc,*)
	..


DEFINITION
  SSYRK performs one of the symmetric rank k operations

      C := alpha*A*A**T + beta*C,

  or

      C := alpha*A**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A is
  an n by k matrix in the first case and a k by n matrix in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**T + beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*A + beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**T*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number

    of columns
      of the  matrix A, and on entry with TRANS = 'T' or 't' or 'C' or 'c', K
      specifies the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is REAL array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta.

   C
  C is REAL array, dimension ( LDC, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array C must contain the
  upper triangular part of the symmetric matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ssyrk(3m_blas)
stbmv(3m_blas)							stbmv(3m_blas)



NAME
  stbmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a triangular band matrix.


SYNOPSIS
  subroutine stbmv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,k,lda,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*)
	real,intent(inout)   :: x(*)
	..


DEFINITION
  STBMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular band matrix, with ( k + 1 ) diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x. On exit,
  X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			stbmv(3m_blas)
stbsv(3m_blas)							stbsv(3m_blas)



NAME
  stbsv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a triangular band
  matrix.


SYNOPSIS
  subroutine stbsv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,k,lda,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*)
	real,intent(inout)   :: x(*)
	..


DEFINITION
  STBSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular band matrix, with ( k + 1 ) diagonals.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element right-hand side
  vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			stbsv(3m_blas)
stpmv(3m_blas)							stpmv(3m_blas)



NAME
  stpmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a packed symmetric matrix.


SYNOPSIS
  subroutine stpmv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: ap(*)
	real,intent(inout)   :: x(*)
	..


DEFINITION
  STPMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is REAL array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 ) respectively, and
  so on.  Before entry with UPLO = 'L' or 'l', the array AP must contain the
  lower triangular matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 )
  respectively, and so on.  Note that when DIAG = 'U' or 'u', the diagonal
  elements of A are not referenced, but are assumed to be unity.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x. On exit,
  X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			stpmv(3m_blas)
zsymm(3m_blas)							zsymm(3m_blas)



NAME
  zsymm(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zsymm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: lda,ldb,ldc,m,n
	character,intent(in)		   :: side,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),b(ldb,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZSYMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is a symmetric matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the symmetric matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the symmetric matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    symmetric matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    symmetric matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is m when
  SIDE = 'L' or 'l' and is n otherwise.  Before entry with SIDE = 'L' or 'l',
  the m by m part of the array A must contain the symmetric matrix, such that
  when UPLO = 'U' or 'u', the leading m by m upper triangular part of the
  array A must contain the upper triangular part of the symmetric matrix and
  the strictly lower triangular part of A is not referenced, and when UPLO =
  'L' or 'l', the leading m by m lower triangular part of the array A must
  contain the lower triangular part of the symmetric matrix and the strictly
  upper triangular part of A is not referenced.  Before entry with SIDE = 'R'
  or 'r', the n by n part of the array A must contain the symmetric matrix,
  such that when UPLO = 'U' or 'u', the leading n by n upper triangular part
  of the array A must contain the upper triangular part of the symmetric
  matrix and the strictly lower triangular part of A is not referenced, and
  when UPLO = 'L' or 'l', the leading n by n lower triangular part of the
  array A must contain the lower triangular part of the symmetric matrix and
  the strictly upper triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is complex(kind=real64) array, dimension ( LDB, N ) Before entry, the
  leading m by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then C need not be set on input.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry, the
  leading m by n part of the array C must contain the matrix C, except when
  beta is zero, in which case C need not be set on entry.  On exit, the array
  C is overwritten by the m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zsymm(3m_blas)
zsyr2k(3m_blas) 					       zsyr2k(3m_blas)



NAME
  zsyr2k(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zsyr2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: k,lda,ldb,ldc,n
	character,intent(in)		   :: trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),b(ldb,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZSYR2K performs one of the symmetric rank 2k operations

      C := alpha*A*B**T + alpha*B*A**T + beta*C,

  or

      C := alpha*A**T*B + alpha*B**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A and
  B are n by k matrices in the first case and k by n matrices in the second
  case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'    C := alpha*A*B**T + alpha*B*A**T +
					   beta*C.

		TRANS = 'T' or 't'    C := alpha*A**T*B + alpha*B**T*A +
					   beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'T' or 't', K
  specifies the number of rows of the matrices A and B. K must be at least
  zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array A must contain the matrix A,
  otherwise the leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is complex(kind=real64) array, dimension ( LDB, kb ), where kb is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array B must contain the matrix B,
  otherwise the leading k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       zsyr2k(3m_blas)
zsyrk(3m_blas)							zsyrk(3m_blas)



NAME
  zsyrk(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zsyrk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(inout) :: alpha,beta
	integer,intent(in)		   :: k,lda,ldc,n
	character,intent(in)		   :: trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZSYRK performs one of the symmetric rank k operations

      C := alpha*A*A**T + beta*C,

  or

      C := alpha*A**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A is
  an n by k matrix in the first case and a k by n matrix in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**T + beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrix A, and on entry with TRANS = 'T' or 't', K specifies
  the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array A must contain the matrix A,
  otherwise the leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zsyrk(3m_blas)
ztbmv(3m_blas)							ztbmv(3m_blas)



NAME
  ztbmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztbmv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,k,lda,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTBMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular band matrix, with ( k + 1 ) diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ).  Before entry with
  UPLO = 'U' or 'u', the leading ( k + 1 ) by n part of the array A must
  contain the upper triangular band part of the matrix of coefficients,
  supplied column by column, with the leading diagonal of the matrix in row (
  k + 1 ) of the array, the first super-diagonal starting at position 2 in row
  k, and so on. The top left k by k triangle of the array A is not referenced.
  The following program segment will transfer an upper triangular band matrix
  from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztbmv(3m_blas)
ztbsv(3m_blas)							ztbsv(3m_blas)



NAME
  ztbsv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztbsv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,k,lda,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTBSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular band matrix, with ( k + 1 ) diagonals.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading ( k + 1 ) by n part of the array A must contain
  the upper triangular band part of the matrix of coefficients, supplied
  column by column, with the leading diagonal of the matrix in row ( k + 1 )
  of the array, the first super-diagonal starting at position 2 in row k, and
  so on. The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  right-hand side vector b. On exit, X is overwritten with the solution vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztbsv(3m_blas)
ztpmv(3m_blas)							ztpmv(3m_blas)



NAME
  ztpmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztpmv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: ap(*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTPMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is complex(kind=real64) array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular matrix packed sequentially, column by column, so that AP( 1 )
  contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  2, 1 ) and a( 3, 1 ) respectively, and so on.  Note that when DIAG = 'U' or
  'u', the diagonal elements of A are not referenced, but are assumed to be
  unity.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztpmv(3m_blas)
ztpsv(3m_blas)							ztpsv(3m_blas)



NAME
  ztpsv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztpsv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: ap(*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTPSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix, supplied in packed form.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is complex(kind=real64) array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular matrix packed sequentially, column by column, so that AP( 1 )
  contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  2, 1 ) and a( 3, 1 ) respectively, and so on.  Note that when DIAG = 'U' or
  'u', the diagonal elements of A are not referenced, but are assumed to be
  unity.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  right-hand side vector b. On exit, X is overwritten with the solution vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztpsv(3m_blas)
ztrmm(3m_blas)							ztrmm(3m_blas)



NAME
  ztrmm(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine ztrmm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: lda,ldb,m,n
	character,intent(in)		   :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: b(ldb,*)
	..


DEFINITION
  ZTRMM performs one of the matrix-matrix operations

      B := alpha*op( A )*B,   or   B := alpha*B*op( A )

  where alpha is a scalar, B is an m by n matrix, A is a unit, or non-unit,
  upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T   or   op( A ) = A**H.


OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) multiplies B
  from the left or right as follows:

		SIDE = 'L' or 'l'   B := alpha*op( A )*B.

		SIDE = 'R' or 'r'   B := alpha*B*op( A ).


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**H.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.
  When alpha is zero then A is not referenced and B need not be set before
  entry.

   A
  A is complex(kind=real64) array, dimension ( LDA, k ), where k is m when
  SIDE = 'L' or 'l' and is n when SIDE = 'R' or 'r'.  Before entry with UPLO =
  'U' or 'u', the leading k by k upper triangular part of the array A must
  contain the upper triangular matrix and the strictly lower triangular part
  of A is not referenced.  Before entry with UPLO = 'L' or 'l', the leading k
  by k lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is complex(kind=real64) array, dimension ( LDB, N ).  Before entry, the
  leading m by n part of the array B must contain the matrix B, and on exit is
  overwritten by the transformed matrix.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztrmm(3m_blas)
ztrmv(3m_blas)							ztrmv(3m_blas)



NAME
  ztrmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztrmv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,lda,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTRMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ).  Before entry with
  UPLO = 'U' or 'u', the leading n by n upper triangular part of the array A
  must contain the upper triangular matrix and the strictly lower triangular
  part of A is not referenced.	Before entry with UPLO = 'L' or 'l', the
  leading n by n lower triangular part of the array A must contain the lower
  triangular matrix and the strictly upper triangular part of A is not
  referenced.  Note that when DIAG = 'U' or 'u', the diagonal elements of A
  are not referenced either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztrmv(3m_blas)
ztrsm(3m_blas)							ztrsm(3m_blas)



NAME
  ztrsm(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL3]


SYNOPSIS
  subroutine ztrsm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: lda,ldb,m,n
	character,intent(in)		   :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: b(ldb,*)
	..


DEFINITION
  ZTRSM solves one of the matrix equations

      op( A )*X = alpha*B,   or   X*op( A ) = alpha*B,

  where alpha is a scalar, X and B are m by n matrices, A is a unit, or non-
  unit, upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T   or   op( A ) = A**H.

  The matrix X is overwritten on B.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) appears on the
  left or right of X as follows:

		SIDE = 'L' or 'l'   op( A )*X = alpha*B.

		SIDE = 'R' or 'r'   X*op( A ) = alpha*B.


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**H.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.
  When alpha is zero then A is not referenced and B need not be set before
  entry.

   A
  A is complex(kind=real64) array, dimension ( LDA, k ), where k is m when
  SIDE = 'L' or 'l' and k is n when SIDE = 'R' or 'r'.	Before entry with UPLO
  = 'U' or 'u', the leading k by k upper triangular part of the array A must
  contain the upper triangular matrix and the strictly lower triangular part
  of A is not referenced.  Before entry with UPLO = 'L' or 'l', the leading k
  by k lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is complex(kind=real64) array, dimension ( LDB, N ) Before entry, the
  leading m by n part of the array B must contain the right-hand side matrix
  B, and on exit is overwritten by the solution matrix X.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztrsm(3m_blas)
ztrsv(3m_blas)							ztrsv(3m_blas)



NAME
  ztrsv(3f) - [BLAS:COMPLEX16_BLAS_LEVEL2]


SYNOPSIS
  subroutine ztrsv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,lda,n
	character,intent(in)		   :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: x(*)
	..


DEFINITION
  ZTRSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  On entry, TRANS specifies the equations to be solved as follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  On entry, DIAG specifies whether or not A is unit triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  On entry, N specifies the order of the matrix A.  N must be at least zero.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular matrix and the strictly lower triangular part
  of A is not referenced.  Before entry with UPLO = 'L' or 'l', the leading n
  by n lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  right-hand side vector b. On exit, X is overwritten with the solution vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ztrsv(3m_blas)
stpsv(3m_blas)							stpsv(3m_blas)



NAME
  stpsv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a packed
  symmetric matrix.


SYNOPSIS
  subroutine stpsv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: ap(*)
	real,intent(inout)   :: x(*)
	..


DEFINITION
  STPSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix, supplied in packed form.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is REAL array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 ) respectively, and
  so on.  Before entry with UPLO = 'L' or 'l', the array AP must contain the
  lower triangular matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 )
  respectively, and so on.  Note that when DIAG = 'U' or 'u', the diagonal
  elements of A are not referenced, but are assumed to be unity.

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element right-hand side
  vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			stpsv(3m_blas)
strmm(3m_blas)							strmm(3m_blas)



NAME
  strmm(3f) - [BLAS:SINGLE_BLAS_LEVEL3] B:=A*B or B:=B*A, A triangular, B
  rectangular.


SYNOPSIS
  subroutine strmm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: lda,ldb,m,n
	character,intent(in) :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*)
	real,intent(inout)   :: b(ldb,*)
	..


DEFINITION
  STRMM performs one of the matrix-matrix operations

      B := alpha*op( A )*B,   or   B := alpha*B*op( A ),

  where alpha is a scalar, B is an m by n matrix, A is a unit, or non-unit,
  upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T.


OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) multiplies B
  from the left or right as follows:

		SIDE = 'L' or 'l'   B := alpha*op( A )*B.

		SIDE = 'R' or 'r'   B := alpha*B*op( A ).


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**T.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha. When alpha is zero
  then A is not referenced and B need not be set before entry.

   A
  A is REAL array, dimension ( LDA, k ), where k is m when SIDE = 'L' or 'l'
  and is n when SIDE = 'R' or 'r'.  Before entry with UPLO = 'U' or 'u', the
  leading k by k upper triangular part of the array A must contain the upper
  triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading k by k lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is REAL array, dimension ( LDB, N ) Before entry, the leading m by n part
  of the array B must contain the matrix B, and on exit is overwritten by the
  transformed matrix.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			strmm(3m_blas)
strmv(3m_blas)							strmv(3m_blas)



NAME
  strmv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=A*SX, A a triangular matrix.


SYNOPSIS
  subroutine strmv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,lda,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)    :: a(lda,*)
	real,intent(inout) :: x(*)
	..


DEFINITION
  STRMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,


  where x is an n element vector and
    A is an n by n unit, or non-unit, upper or lower triangular matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array A must contain the
  upper triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element vector x. On exit,
  X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			strmv(3m_blas)
strsm(3m_blas)							strsm(3m_blas)



NAME
  strsm(3f) - [BLAS:SINGLE_BLAS_LEVEL3] B:=INVERSE(A)*C or B:=C*INVERSE(A), B,
  C rectangular, A triangular.


SYNOPSIS
  subroutine strsm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	real,intent(in)      :: alpha
	integer,intent(in)   :: lda,ldb,m,n
	character,intent(in) :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	real,intent(in)    :: a(lda,*)
	real,intent(inout) :: b(ldb,*)
	..


DEFINITION
  STRSM solves one of the matrix equations

      op( A )*X = alpha*B,   or   X*op( A ) = alpha*B,

  where alpha is a scalar, X and B are m by n matrices, A is a unit, or non-
  unit, upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T.

  The matrix X is overwritten on B.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) appears on the
  left or right of X as follows:

		SIDE = 'L' or 'l'   op( A )*X = alpha*B.

		SIDE = 'R' or 'r'   X*op( A ) = alpha*B.


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**T.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha. When alpha is zero
  then A is not referenced and B need not be set before entry.

   A
  A is REAL array, dimension ( LDA, k ), where k is m when SIDE = 'L' or 'l'
  and k is n when SIDE = 'R' or 'r'.  Before entry with UPLO = 'U' or 'u', the
  leading k by k upper triangular part of the array A must contain the upper
  triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading k by k lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is REAL array, dimension ( LDB, N ) Before entry, the leading m by n part
  of the array B must contain the right-hand side matrix B, and on exit is
  overwritten by the solution matrix X.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			strsm(3m_blas)
strsv(3m_blas)							strsv(3m_blas)



NAME
  strsv(3f) - [BLAS:SINGLE_BLAS_LEVEL2] SX:=INVERSE(A)*SX, A a triangular
  matrix.


SYNOPSIS
  subroutine strsv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)   :: incx,lda,n
	character,intent(in) :: diag,trans,uplo
	..
	.. Array Arguments ..
	real,intent(in)      :: a(lda,*)
	real,intent(inout)   :: x(*)
	..


DEFINITION
  STRSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is REAL array, dimension ( LDA, N ) Before entry with UPLO = 'U' or 'u',
  the leading n by n upper triangular part of the array A must contain the
  upper triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is REAL array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).  Before
  entry, the incremented array X must contain the n element right-hand side
  vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			strsv(3m_blas)
xerbla(3m_blas) 					       xerbla(3m_blas)



NAME
  xerbla(3f) - [BLAS:AUX_BLAS] error handler routine for the BLAS/LAPACK
  routines


SYNOPSIS
  subroutine xerbla( srname, info )

	 .. Scalar Arguments ..
	 character(len=*),intent(in) :: srname
	 integer,intent(in)	     :: info
	 ..


DEFINITION
  XERBLA is an error handler for the LAPACK routines.  It is called by an
  LAPACK routine if an input parameter has an invalid value. A message is
  printed and execution stops.

  Installers may consider modifying the STOP statement in order to call
  system-specific exception-handling facilities.

OPTIONS
   SRNAME
  SRNAME is character(len=*),intent(in) The name of the routine which called
  XERBLA.

   INFO
  INFO is integer,intent(in) The position of the invalid parameter in the
  parameter list of the calling routine.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       xerbla(3m_blas)
xerbla_array(3m_blas)					 xerbla_array(3m_blas)



NAME
  xerbla_array(3f) - [BLAS:AUX_BLAS] call XERBLA(3f) with an array of
  characters instead of a string


SYNOPSIS
  subroutine xerbla_array(srname_array, srname_len, info)

	 .. Scalar Arguments ..
	 integer srname_len, info
	 ..
	 .. Array Arguments ..
	 character(*) srname_array(srname_len)
	 ..


DEFINITION
  XERBLA_ARRAY assists other languages in calling XERBLA, the LAPACK and BLAS
  error handler. Rather than taking a Fortran string argument as the
  function's name, XERBLA_ARRAY takes an array of single characters along with
  the array's length. XERBLA_ARRAY then copies up to 32 characters of that
  array into a Fortran string and passes that to XERBLA. If called with a non-
  positive SRNAME_LEN, XERBLA_ARRAY will call XERBLA with a string of all
  blank characters.

  Say some macro or other device makes XERBLA_ARRAY available to C99 by a name
  lapack_xerbla and with a common Fortran calling convention.  Then a C99
  program could invoke XERBLA via: { int flen = strlen(__func__);
  lapack_xerbla(__func__, &flen, &info); }

  Providing XERBLA_ARRAY is not necessary for intercepting LAPACK errors.
  XERBLA_ARRAY calls XERBLA.

OPTIONS
   SRNAME_ARRAY
  SRNAME_ARRAY is CHARACTER(*) array, dimension (SRNAME_LEN) The name of the
  routine which called XERBLA_ARRAY.

   SRNAME_LEN
  SRNAME_LEN is INTEGER The length of the name in SRNAME_ARRAY.

   INFO
  INFO is INTEGER The position of the invalid parameter in the parameter list
  of the calling routine.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		 xerbla_array(3m_blas)
zaxpy(3m_blas)							zaxpy(3m_blas)



NAME
  zaxpy(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1] ZY := ZY+ZA*ZX complex constant
  times a complex vector plus a complex vector.


SYNOPSIS
  subroutine zaxpy(n,za,zx,incx,zy,incy)

	! .. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: za
	integer,intent(in)		   :: incx,incy,n
	! ..
	! .. Array Arguments ..
	complex(kind=real64),intent(in)    :: zx(*)
	complex(kind=real64),intent(inout) :: zy(*)
	! ..


DEFINITION
  ZAXPY constant times a vector plus a vector.

	  ZY := ZY+ZA*ZX


OPTIONS
  N number of elements in input vector(s)

  ZA
    On entry, ZA specifies the scalar alpha.

  ZX
    ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

  INCX
    storage spacing between elements of ZX

  ZY
    ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

  INCY
    storage spacing between elements of ZY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 12/3/93, array(1) declarations changed to
  array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zaxpy(3m_blas)
zcopy(3m_blas)							zcopy(3m_blas)



NAME
  zcopy(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  subroutine zcopy(n,zx,incx,zy,incy)

	.. Scalar Arguments ..
	integer,intent(in)		 :: incx,incy,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)  :: ZX(*)
	complex(kind=real64),intent(out) :: ZY(*)
	..


DEFINITION
  ZCOPY copies a vector, x, to a vector, y.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

   ZY
  ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of ZY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 4/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zcopy(3m_blas)
zdotc(3m_blas)							zdotc(3m_blas)



NAME
  zdotc(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  complex(kind=real64) function zdotc(n,zx,incx,zy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in) :: zx(*),zy(*)
	..


DEFINITION
  ZDOTC forms the dot product of two complex vectors ZDOTC = X^H * Y

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

   ZY
  ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of ZY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 12/3/93, array(1) declarations changed to
  array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zdotc(3m_blas)
zdotu(3m_blas)							zdotu(3m_blas)



NAME
  zdotu(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  complex(kind=real64) function zdotu(n,zx,incx,zy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in) :: zx(*),zy(*)
	..


DEFINITION
  ZDOTU forms the dot product of two complex vectors ZDOTU = X^T * Y

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

   ZY
  ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of ZY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 12/3/93, array(1) declarations changed to
  array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zdotu(3m_blas)
zdrot(3m_blas)							zdrot(3m_blas)



NAME
  zdrot(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  subroutine zdrot( n, zx, incx, zy, incy, c, s )

	.. Scalar Arguments ..
	integer,intent(in)	    :: incx, incy, n
	double precision,intent(in) :: c, s
	..
	.. Array Arguments ..
	complex(kind=real64),intent(inout) :: zx( * ), zy( * )
	..


DEFINITION
  Applies a plane rotation, where the cos and sin (c and s) are real and the
  vectors cx and cy are complex.  jack dongarra, linpack, 3/11/78.

OPTIONS
   N
  N is INTEGER On entry, N specifies the order of the vectors cx and cy.  N
  must be at least zero.

   ZX
  ZX is complex(kind=real64) array, dimension at least ( 1 + ( N - 1 )*abs(
  INCX ) ).  Before entry, the incremented array ZX must contain the n element
  vector cx. On exit, ZX is overwritten by the updated vector cx.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  ZX. INCX must not be zero.

   ZY
  ZY is complex(kind=real64) array, dimension at least ( 1 + ( N - 1 )*abs(
  INCY ) ).  Before entry, the incremented array ZY must contain the n element
  vector cy. On exit, ZY is overwritten by the updated vector cy.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  ZY. INCY must not be zero.

   C
  C is DOUBLE PRECISION On entry, C specifies the cosine, cos.

   S
  S is DOUBLE PRECISION On entry, S specifies the sine, sin.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zdrot(3m_blas)
zdscal(3m_blas) 					       zdscal(3m_blas)



NAME
  zdscal(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  subroutine zdscal(n,da,zx,incx)

	.. Scalar Arguments ..
	double precision,intent(in) :: da
	integer,intent(in) :: incx,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(inout) :: zx(*)
	..


DEFINITION
  ZDSCAL scales a vector by a constant.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DA
  DA is DOUBLE PRECISION On entry, DA specifies the scalar alpha.

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 3/93 to return if incx .le. 0.  modified
  12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       zdscal(3m_blas)
zgbmv(3m_blas)							zgbmv(3m_blas)



NAME
  zgbmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zgbmv(trans,m,n,kl,ku,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: incx,incy,kl,ku,lda,m,n
	character,intent(in)		   :: trans
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),x(*)
	complex(kind=real64),intent(inout) :: y(*)
	..


DEFINITION
  ZGBMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,   or

      y := alpha*A**H*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  band matrix, with kl sub-diagonals and ku super-diagonals.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   KL
  KL is INTEGER On entry, KL specifies the number of sub-diagonals of the
  matrix A. KL must satisfy 0 .le. KL.

   KU
  KU is INTEGER On entry, KU specifies the number of super-diagonals of the
  matrix A. KU must satisfy 0 .le. KU.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry, the
  leading ( kl + ku + 1 ) by n part of the array A must contain the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row ( ku + 1 ) of the array, the first super-diagonal starting at
  position 2 in row ku, the first sub-diagonal starting at position 1 in row (
  ku + 2 ), and so on.	Elements in the array A that do not correspond to
  elements in the band matrix (such as the top left ku by ku triangle) are not
  referenced.  The following program segment will transfer a band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      K = KU + 1 - J
		      DO 10, I = MAX( 1, J - KU ), MIN( M, J + KL )
			 A( K + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( kl + ku + 1 ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ) when TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) )
  otherwise.  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( m - 1 )*abs(
  INCY ) ) when TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) )
  otherwise.  Before entry, the incremented array Y must contain the vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zgbmv(3m_blas)
zgemm(3m_blas)							zgemm(3m_blas)



NAME
  zgemm(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zgemm(transa,transb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: k,lda,ldb,ldc,m,n
	character,intent(in)		   :: transa,transb
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),b(ldb,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZGEMM performs one of the matrix-matrix operations

      C := alpha*op( A )*op( B ) + beta*C,

  where op( X ) is one of

      op( X ) = X   or	 op( X ) = X**T   or   op( X ) = X**H,

  alpha and beta are scalars, and A, B and C are matrices, with op( A ) an m
  by k matrix, op( B ) a k by n matrix and C an m by n matrix.

OPTIONS
   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n',  op( A ) = A.

		TRANSA = 'T' or 't',  op( A ) = A**T.

		TRANSA = 'C' or 'c',  op( A ) = A**H.


   TRANSB
  TRANSB is CHARACTER*1 On entry, TRANSB specifies the form of op( B ) to be
  used in the matrix multiplication as follows:

		TRANSB = 'N' or 'n',  op( B ) = B.

		TRANSB = 'T' or 't',  op( B ) = B**T.

		TRANSB = 'C' or 'c',  op( B ) = B**H.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix op( A )
  and of the matrix C. M must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix op( B
  ) and the number of columns of the matrix C. N must be at least zero.

   K
  K is INTEGER On entry, K specifies the number of columns of the matrix op( A
  ) and the number of rows of the matrix op( B ). K must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is k when
  TRANSA = 'N' or 'n', and is m otherwise.  Before entry with TRANSA = 'N' or
  'n', the leading m by k part of the array A must contain the matrix A,
  otherwise the leading k by m part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANSA = 'N' or 'n' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, k ).

   B
  B is complex(kind=real64) array, dimension ( LDB, kb ), where kb is n when
  TRANSB = 'N' or 'n', and is k otherwise.  Before entry with TRANSB = 'N' or
  'n', the leading k by n part of the array B must contain the matrix B,
  otherwise the leading n by k part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANSB = 'N' or 'n' then LDB must be at
  least max( 1, k ), otherwise LDB must be at least max( 1, n ).

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then C need not be set on input.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry, the
  leading m by n part of the array C must contain the matrix C, except when
  beta is zero, in which case C need not be set on entry.  On exit, the array
  C is overwritten by the m by n matrix ( alpha*op( A )*op( B ) + beta*C ).

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zgemm(3m_blas)
zgemv(3m_blas)							zgemv(3m_blas)



NAME
  zgemv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zgemv(trans,m,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: incx,incy,lda,m,n
	character,intent(in)		   :: trans
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),x(*)
	complex(kind=real64),intent(inout) :: y(*)
	..


DEFINITION
  ZGEMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,   or

      y := alpha*A**H*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  matrix.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry, the
  leading m by n part of the array A must contain the matrix of coefficients.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ) when TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) )
  otherwise.  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( m - 1 )*abs(
  INCY ) ) when TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) )
  otherwise.  Before entry with BETA non-zero, the incremented array Y must
  contain the vector y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zgemv(3m_blas)
zgerc(3m_blas)							zgerc(3m_blas)



NAME
  zgerc(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zgerc(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*),y(*)
	complex(kind=real64),intent(inout) :: a(lda,*)
	..


DEFINITION
  ZGERC performs the rank 1 operation

      A := alpha*x*y**H + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( m - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the m element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the n element
  vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry, the
  leading m by n part of the array A must contain the matrix of coefficients.
  On exit, A is overwritten by the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zgerc(3m_blas)
zgeru(3m_blas)							zgeru(3m_blas)



NAME
  zgeru(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zgeru(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*),y(*)
	complex(kind=real64),intent(inout) :: a(lda,*)
	..


DEFINITION
  ZGERU performs the rank 1 operation

      A := alpha*x*y**T + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
  M On entry, M specifies the number of rows of the matrix A.  M must be at
    least zero.

  N On entry, N specifies the number of columns of the matrix A.  N must be at
    least zero.

  ALPHA
    On entry, ALPHA specifies the scalar alpha.

  X array, dimension at least

	  ( 1 + ( m - 1 )*abs( INCX ) ).

	  Before entry, the incremented array X must contain the m
	  element vector x.


  INCX
    On entry, INCX specifies the increment for the elements of X. INCX must
    not be zero.

  Y array, dimension at least

	  ( 1 + ( n - 1 )*abs( INCY ) ).

  Before entry, the incremented array Y must contain the n element vector y.

  INCY
    On entry, INCY specifies the increment for the elements of Y. INCY must
    not be zero.

  A array, dimension ( LDA, N ) Before entry, the leading m by n part of the
    array A must contain the matrix of coefficients. On exit, A is overwritten
    by the updated matrix.

  LDA
    On entry, LDA specifies the first dimension of A as declared in the
    calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zgeru(3m_blas)
zhbmv(3m_blas)							zhbmv(3m_blas)



NAME
  zhbmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zhbmv(uplo,n,k,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: incx,incy,k,lda,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),x(*)
	complex(kind=real64),intent(inout) :: y(*)
	..


DEFINITION
  ZHBMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian band matrix, with k super-diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the band matrix A is being supplied as follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    being supplied.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    being supplied.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry, K specifies the number of super-diagonals of the
  matrix A. K must satisfy 0 .le. K.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading ( k + 1 ) by n part of the array A must contain
  the upper triangular band part of the hermitian matrix, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer the upper triangular part of a
  hermitian band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the hermitian matrix,
  supplied column by column, with the leading diagonal of the matrix in row 1
  of the array, the first sub-diagonal starting at position 1 in row 2, and so
  on. The bottom right k by k triangle of the array A is not referenced.  The
  following program segment will transfer the lower triangular part of a
  hermitian band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that the imaginary parts of the diagonal elements need not be set and
  are assumed to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zhbmv(3m_blas)
zhemm(3m_blas)							zhemm(3m_blas)



NAME
  zhemm(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zhemm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: lda,ldb,ldc,m,n
	character,intent(in)		   :: side,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),b(ldb,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZHEMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is an hermitian matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the hermitian matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the hermitian matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    hermitian matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    hermitian matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is m when
  SIDE = 'L' or 'l' and is n otherwise.  Before entry with SIDE = 'L' or 'l',
  the m by m part of the array A must contain the hermitian matrix, such that
  when UPLO = 'U' or 'u', the leading m by m upper triangular part of the
  array A must contain the upper triangular part of the hermitian matrix and
  the strictly lower triangular part of A is not referenced, and when UPLO =
  'L' or 'l', the leading m by m lower triangular part of the array A must
  contain the lower triangular part of the hermitian matrix and the strictly
  upper triangular part of A is not referenced.  Before entry with SIDE = 'R'
  or 'r', the n by n part of the array A must contain the hermitian matrix,
  such that when UPLO = 'U' or 'u', the leading n by n upper triangular part
  of the array A must contain the upper triangular part of the hermitian
  matrix and the strictly lower triangular part of A is not referenced, and
  when UPLO = 'L' or 'l', the leading n by n lower triangular part of the
  array A must contain the lower triangular part of the hermitian matrix and
  the strictly upper triangular part of A is not referenced.  Note that the
  imaginary parts of the diagonal elements need not be set, they are assumed
  to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is complex(kind=real64) array, dimension ( LDB, N ) Before entry, the
  leading m by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then C need not be set on input.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry, the
  leading m by n part of the array C must contain the matrix C, except when
  beta is zero, in which case C need not be set on entry.  On exit, the array
  C is overwritten by the m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zhemm(3m_blas)
zhemv(3m_blas)							zhemv(3m_blas)



NAME
  zhemv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zhemv(uplo,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: incx,incy,lda,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),x(*)
	complex(kind=real64),intent(inout) :: y(*)
	..


DEFINITION
  ZHEMV performs the matrix-vector
    operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of A is not referenced.  Before entry with UPLO = 'L'
  or 'l', the leading n by n lower triangular part of the array A must contain
  the lower triangular part of the hermitian matrix and the strictly upper
  triangular part of A is not referenced.  Note that the imaginary parts of
  the diagonal elements need not be set and are assumed to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the n element
  vector y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zhemv(3m_blas)
zher(3m_blas)							 zher(3m_blas)



NAME
  zher(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zher(uplo,n,alpha,x,incx,a,lda)

	.. Scalar Arguments ..
	double precision,intent(in)	   :: alpha
	integer ,intent(in)		   :: incx,lda,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*)
	complex(kind=real64),intent(inout) :: a(lda,*)
	..


DEFINITION
  ZHER performs the hermitian rank 1 operation

      A := alpha*x*x**H + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of A is not referenced. On exit, the upper triangular
  part of the array A is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular part
  of the hermitian matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 zher(3m_blas)
zher2(3m_blas)							zher2(3m_blas)



NAME
  zher2(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zher2(uplo,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: incx,incy,lda,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*),y(*)
	complex(kind=real64),intent(inout) :: a(lda,*)
	..


DEFINITION
  ZHER2 performs the hermitian rank 2 operation

      A := alpha*x*y**H + conjg( alpha )*y*x**H + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the n element
  vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is complex(kind=real64) array, dimension ( LDA, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of A is not referenced. On exit, the upper triangular
  part of the array A is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular part
  of the hermitian matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zher2(3m_blas)
zher2k(3m_blas) 					       zher2k(3m_blas)



NAME
  zher2k(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zher2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	double precision,intent(in)	   :: beta
	integer ,intent(in)		   ::k,lda,ldb,ldc,n
	character,intent(in)		   :: trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*),b(ldb,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZHER2K performs one of the hermitian rank 2k operations

      C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C,

  or

      C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C,

  where alpha and beta are scalars with beta real, C is an n by n hermitian
  matrix and A and B are n by k matrices in the first case and k by n matrices
  in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'    C := alpha*A*B**H 	 +
					   conjg( alpha )*B*A**H +
					   beta*C.

		TRANS = 'C' or 'c'    C := alpha*A**H*B 	 +
					   conjg( alpha )*B**H*A +
					   beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'C' or 'c', K
  specifies the number of rows of the matrices A and B. K must be at least
  zero.

   ALPHA
  ALPHA is complex(kind=real64) .  On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array A must contain the matrix A,
  otherwise the leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is complex(kind=real64) array, dimension ( LDB, kb ), where kb is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array B must contain the matrix B,
  otherwise the leading k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).  Unchanged on
  exit.

   BETA
  BETA is DOUBLE PRECISION .  On entry, BETA specifies the scalar beta.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the hermitian matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

  -- Modified 8-Nov-93 to set C(J,J) to DBLE( C(J,J) ) when BETA = 1.  Ed
  Anderson, Cray Research Inc.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       zher2k(3m_blas)
zherk(3m_blas)							zherk(3m_blas)



NAME
  zherk(3f) - [BLAS:COMPLEX16_BLAS_LEVEL3]


SYNOPSIS
  subroutine zherk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	double precision,intent(in)	   :: alpha,beta
	integer,intent(in)		   :: k,lda,ldc,n
	character,intent(in)		   :: trans,uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: a(lda,*)
	complex(kind=real64),intent(inout) :: c(ldc,*)
	..


DEFINITION
  ZHERK performs one of the hermitian rank k operations

      C := alpha*A*A**H + beta*C,

  or

      C := alpha*A**H*A + beta*C,

  where alpha and beta are real scalars, C is an n by n hermitian matrix and A
  is an n by k matrix in the first case and a k by n matrix in the second
  case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**H + beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**H*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrix A, and on entry with TRANS = 'C' or 'c', K specifies
  the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION .  On entry, ALPHA specifies the scalar alpha.

   A
  A is complex(kind=real64) array, dimension ( LDA, ka ), where ka is k when
  TRANS = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or
  'n', the leading n by k part of the array A must contain the matrix A,
  otherwise the leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta.

   C
  C is complex(kind=real64) array, dimension ( LDC, N ) Before entry with UPLO
  = 'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the hermitian matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

  -- Modified 8-Nov-93 to set C(J,J) to DBLE( C(J,J) ) when BETA = 1.  Ed
  Anderson, Cray Research Inc.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zherk(3m_blas)
zhpmv(3m_blas)							zhpmv(3m_blas)



NAME
  zhpmv(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zhpmv(uplo,n,alpha,ap,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha,beta
	integer,intent(in)		   :: incx,incy,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: ap(*),x(*)
	complex(kind=real64),intent(inout) :: y(*)
	..


DEFINITION
  ZHPMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   AP
  AP is complex(kind=real64) array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular part of the hermitian matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  1, 2 ) and a( 2, 2 ) respectively, and so on.  Before entry with UPLO = 'L'
  or 'l', the array AP must contain the lower triangular part of the hermitian
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and
  so on.  Note that the imaginary parts of the diagonal elements need not be
  set and are assumed to be zero.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is complex(kind=real64) On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the n element
  vector y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zhpmv(3m_blas)
zhpr(3m_blas)							 zhpr(3m_blas)



NAME
  zhpr(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zhpr(uplo,n,alpha,x,incx,ap)

	.. Scalar Arguments ..
	double precision ,intent(in)	   :: alpha
	integer ,intent(in)		   :: incx,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*)
	complex(kind=real64),intent(inout) :: ap(*)
	..


DEFINITION
  ZHPR performs the hermitian rank 1 operation

      A := alpha*x*x**H + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   AP
  AP is complex(kind=real64) array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular part of the hermitian matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  1, 2 ) and a( 2, 2 ) respectively, and so on. On exit, the array AP is
  overwritten by the upper triangular part of the updated matrix.  Before
  entry with UPLO = 'L' or 'l', the array AP must contain the lower triangular
  part of the hermitian matrix packed sequentially, column by column, so that
  AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3,
  1 ) respectively, and so on. On exit, the array AP is overwritten by the
  lower triangular part of the updated matrix.	Note that the imaginary parts
  of the diagonal elements need not be set, they are assumed to be zero, and
  on exit they are set to zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 zhpr(3m_blas)
zhpr2(3m_blas)							zhpr2(3m_blas)



NAME
  zhpr2(3f) - [BLAS:COMPLEX_16_BLAS_LEVEL2]


SYNOPSIS
  subroutine zhpr2(uplo,n,alpha,x,incx,y,incy,ap)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: alpha
	integer,intent(in)		   :: incx,incy,n
	character,intent(in)		   :: uplo
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in)    :: x(*),y(*)
	complex(kind=real64),intent(inout) :: ap(*)
	..


DEFINITION
  ZHPR2 performs the hermitian rank 2 operation

      A := alpha*x*y**H + conjg( alpha )*y*x**H + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is complex(kind=real64) On entry, ALPHA specifies the scalar alpha.

   X
  X is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCX ) ).  Before entry, the incremented array X must contain the n element
  vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is complex(kind=real64) array, dimension at least ( 1 + ( n - 1 )*abs(
  INCY ) ).  Before entry, the incremented array Y must contain the n element
  vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   AP
  AP is complex(kind=real64) array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular part of the hermitian matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  1, 2 ) and a( 2, 2 ) respectively, and so on. On exit, the array AP is
  overwritten by the upper triangular part of the updated matrix.  Before
  entry with UPLO = 'L' or 'l', the array AP must contain the lower triangular
  part of the hermitian matrix packed sequentially, column by column, so that
  AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3,
  1 ) respectively, and so on. On exit, the array AP is overwritten by the
  lower triangular part of the updated matrix.	Note that the imaginary parts
  of the diagonal elements need not be set, they are assumed to be zero, and
  on exit they are set to zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zhpr2(3m_blas)
zrotg(3m_blas)							zrotg(3m_blas)



NAME
  zrotg(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1] constructs a plane rotation


SYNOPSIS
  subroutine zrotg( a, b, c, s )

	.. Scalar Arguments ..
	real(wp),intent(out)	  :: c
	complex(wp),intent(in)	  :: b
	complex(wp),intent(out)   :: s
	complex(wp),intent(inout) :: a
	..


DEFINITION
  ZROTG constructs a plane rotation

       [  c	    s ] [ a ] = [ r ]
       [ -conjg(s)  c ] [ b ]	[ 0 ]

  where c is real, s ic complex, and c**2 + conjg(s)*s = 1.

  The computation uses the formulas

      |x| = sqrt( Re(x)**2 + Im(x)**2 )
      sgn(x) = x / |x|	if x /= 0
	     = 1	if x  = 0
      c = |a| / sqrt(|a|**2 + |b|**2)
      s = sgn(a) * conjg(b) / sqrt(|a|**2 + |b|**2)

  When a and b are real and r /= 0, the formulas simplify to

      r = sgn(a)*sqrt(|a|**2 + |b|**2)
      c = a / r
      s = b / r

  the same as in ZROTG when |a| > |b|. When |b| >= |a|, the sign of c and s
  will be different from those computed by ZROTG if the signs of a and b are
  not the same.

OPTIONS
   A
  A is DOUBLE COMPLEX On entry, the scalar a.  On exit, the scalar r.

   B
  B is DOUBLE COMPLEX The scalar b.

   C
  C is DOUBLE PRECISION The scalar c.

   S
  S is DOUBLE PRECISION The scalar s.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zrotg(3m_blas)
zscal(3m_blas)							zscal(3m_blas)



NAME
  zscal(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  subroutine zscal(n,za,zx,incx)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in)    :: za
	integer,intent(in)		   :: incx,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(inout) :: zx(*)
	..


DEFINITION
  ZSCAL scales a vector by a constant.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZA
  ZA is complex(kind=real64) On entry, ZA specifies the scalar alpha.

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 3/93 to return if incx .le. 0.  modified
  12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zscal(3m_blas)
zswap(3m_blas)							zswap(3m_blas)



NAME
  zswap(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]


SYNOPSIS
  subroutine zswap(n,zx,incx,zy,incy)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,incy,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(inout) :: zx(*),zy(*)
	..


DEFINITION
  ZSWAP interchanges two vectors.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

   ZY
  ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of ZY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 12/3/93, array(1) declarations changed to
  array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			zswap(3m_blas)
sasum(3m_blas)							sasum(3m_blas)



NAME
  sasum(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SASUM:=sum of absolute values of SX.


SYNOPSIS
  real function sasum(n,sx,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,n
	..
	.. Array Arguments ..
	real,intent(in) :: sx(*)
	..


DEFINITION
  SASUM takes the sum of the absolute values.  uses unrolled loops for
  increment equal to one.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			sasum(3m_blas)
caxpy(3m_blas)							caxpy(3m_blas)



NAME
  caxpy(3f) -- [BLAS:COMPLEX_BLAS_LEVEL1] CY:=CY+CA*CX (constant times a
  vector plus a vector)


SYNOPSIS
  subroutine caxpy(n,ca,cx,incx,cy,incy)

	 .. Scalar Arguments ..
	 complex,intent(in)    :: ca
	 integer,intent(in)    :: incx,incy,n
	 ..
	 .. Array Arguments ..
	 complex,intent(in)    :: cx(*)
	 complex,intent(inout) :: cy(*)


DESCRIPTION
  CAXPY constant times a vector plus a vector.

OPTIONS
  N number of elements in input vector(s)

  CA
    On entry, CA specifies the scalar alpha.

  CX
    CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

  INCX
    storage spacing between elements of CX

  CY
    CY is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

  INCY
    storage spacing between elements of CY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

  November 2017

   FURTHER DETAILS
  Jack Dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			caxpy(3m_blas)
ccopy(3m_blas)							ccopy(3m_blas)



NAME
  ccopy(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] CY:=CX (copies elements of a vector x
  to a vector y)


SYNOPSIS
  subroutine ccopy(n,cx,incx,cy,incy)

      .. scalar arguments ..
	 integer,intent(in)  ::  incx,incy,n
      ..
      .. array arguments ..
	 complex,intent(in)  ::  cx(*)
	 complex,intent(out) ::  cy(*)


DESCRIPTION
  CCOPY copies a vector x to a vector y.

OPTIONS
  N number of elements in input vector(s)

  CX
    dimension ( 1 + ( N - 1 )*abs( INCX ) )

  INCX
    storage spacing between elements of CX

  CY
    dimension ( 1 + ( N - 1 )*abs( INCY ) )

  INCY
    storage spacing between elements of CY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ccopy(3m_blas)
cdotc(3m_blas)							cdotc(3m_blas)



NAME
  cdotc(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] CDOTC := SUM CONJUGATE(CX) * CY
  (conjugated vector dot product)


SYNOPSIS
  complex function cdotc(n,cx,incx,cy,incy)

	.. Scalar Arguments ..
	integer,intent(in) ::  incx,incy,n
	..
	.. Array Arguments ..
	complex,intent(in) ::  cx(*),cy(*)
	..


DEFINITION
  CDOTC forms the dot product of two complex vectors

	CDOTC = X^H * Y


OPTIONS
  N number of elements in input vector(s)

  CX
    array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

  INCX
    storage spacing between elements of CX

  CY
    array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

  INCY
    storage spacing between elements of CY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack,
    3/11/78.  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cdotc(3m_blas)
cgemv(3m_blas)							cgemv(3m_blas)



NAME
  cgemv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a
  rectangular matrix.


SYNOPSIS
  subroutine cgemv(trans,m,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	COMPLEX,intent(in)    :: ALPHA,BETA
	INTEGER,intent(in)    :: INCX,INCY,LDA,M,N
	CHARACTER,intent(in)  :: TRANS
	..
	.. Array Arguments ..
	COMPLEX,intent(in)    :: A(LDA,*),X(*)
	COMPLEX,intent(inout) :: Y(*)
	..


DEFINITION
  CGEMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,   or

      y := alpha*A**H*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  matrix.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry, the leading m by n
  part of the array A must contain the matrix of coefficients.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ) when
  TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.
  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then Y need not be set on input.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( m - 1 )*abs( INCY ) ) when
  TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.
  Before entry with BETA non-zero, the incremented array Y must contain the
  vector y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cgemv(3m_blas)
cgerc(3m_blas)							cgerc(3m_blas)



NAME
  cgerc(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-
  TRANSPOSE(CY); ==> A is a rectangular matrix.


SYNOPSIS
  subroutine cgerc(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	integer,intent(in)    :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: a(lda,*)
	complex,intent(in)    :: x(*),y(*)
	..


DEFINITION
  CGERC performs the rank 1 operation

      A := alpha*x*y**H + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( m - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the m element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry, the leading m by n
  part of the array A must contain the matrix of coefficients. On exit, A is
  overwritten by the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cgerc(3m_blas)
cgeru(3m_blas)							cgeru(3m_blas)



NAME
  cgeru(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*TRANSPOSE(CY); ==>
  A is a rectangular matrix.


SYNOPSIS
  subroutine cgeru(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	integer,intent(in)    :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: a(lda,*)
	complex,intent(in)    :: x(*),y(*)
	..


DEFINITION
  CGERU performs the rank 1 operation

      A := alpha*x*y**T + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( m - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the m element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry, the leading m by n
  part of the array A must contain the matrix of coefficients. On exit, A is
  overwritten by the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cgeru(3m_blas)
chbmv(3m_blas)							chbmv(3m_blas)



NAME
  chbmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a
  (square) hermitian band matrix.


SYNOPSIS
  subroutine chbmv(uplo,n,k,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: incx,incy,k,lda,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),x(*)
	complex,intent(inout) :: y(*)
	..


DEFINITION
  CHBMV(3f) performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian band matrix, with k super-diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the band matrix A is being supplied as follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    being supplied.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    being supplied.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry, K specifies the number of super-diagonals of the
  matrix A. K must satisfy 0 .le. K.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the hermitian matrix, supplied column by column,
  with the leading diagonal of the matrix in row ( k + 1 ) of the array, the
  first super-diagonal starting at position 2 in row k, and so on. The top
  left k by k triangle of the array A is not referenced.  The following
  program segment will transfer the upper triangular part of a hermitian band
  matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the hermitian matrix,
  supplied column by column, with the leading diagonal of the matrix in row 1
  of the array, the first sub-diagonal starting at position 1 in row 2, and so
  on. The bottom right k by k triangle of the array A is not referenced.  The
  following program segment will transfer the lower triangular part of a
  hermitian band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that the imaginary parts of the diagonal elements need not be set and
  are assumed to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the vector y. On exit, Y
  is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			chbmv(3m_blas)
dgbmv(3m_blas)							dgbmv(3m_blas)



NAME
  dgbmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dgbmv(trans,m,n,kl,ku,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: incx,incy,kl,ku,lda,m,n
	character,intent(in)	       :: trans
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),x(*)
	double precision,intent(inout) :: y(*)
	..


DEFINITION
  DGBMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  band matrix, with kl sub-diagonals and ku super-diagonals.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**T*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   KL
  KL is INTEGER On entry, KL specifies the number of sub-diagonals of the
  matrix A. KL must satisfy 0 .le. KL.

   KU
  KU is INTEGER On entry, KU specifies the number of super-diagonals of the
  matrix A. KU must satisfy 0 .le. KU.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry, the leading
  ( kl + ku + 1 ) by n part of the array A must contain the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row ( ku + 1 ) of the array, the first super-diagonal starting at
  position 2 in row ku, the first sub-diagonal starting at position 1 in row (
  ku + 2 ), and so on.	Elements in the array A that do not correspond to
  elements in the band matrix (such as the top left ku by ku triangle) are not
  referenced.  The following program segment will transfer a band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      K = KU + 1 - J
		      DO 10, I = MAX( 1, J - KU ), MIN( M, J + KL )
			 A( K + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( kl + ku + 1 ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ) when TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) )
  otherwise.  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( m - 1 )*abs( INCY )
  ) when TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) )
  otherwise.  Before entry, the incremented array Y must contain the vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dgbmv(3m_blas)
dgemm(3m_blas)							dgemm(3m_blas)



NAME
  dgemm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dgemm(transa,transb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	DOUBLE PRECISION,intent(in)    :: ALPHA,BETA
	integer,intent(in)	       :: k,lda,ldb,ldc,m,n
	character,intent(in)	       :: transa,transb
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),b(ldb,*)
	double precision,intent(inout) :: c(ldc,*)
	..


DEFINITION
  DGEMM performs one of the matrix-matrix operations

      C := alpha*op( A )*op( B ) + beta*C,

  where op( X ) is one of

      op( X ) = X   or	 op( X ) = X**T,

  alpha and beta are scalars, and A, B and C are matrices, with op( A ) an m
  by k matrix, op( B ) a k by n matrix and C an m by n matrix.

OPTIONS
   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n',  op( A ) = A.

		TRANSA = 'T' or 't',  op( A ) = A**T.

		TRANSA = 'C' or 'c',  op( A ) = A**T.


   TRANSB
  TRANSB is CHARACTER*1 On entry, TRANSB specifies the form of op( B ) to be
  used in the matrix multiplication as follows:

		TRANSB = 'N' or 'n',  op( B ) = B.

		TRANSB = 'T' or 't',  op( B ) = B**T.

		TRANSB = 'C' or 'c',  op( B ) = B**T.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix op( A )
  and of the matrix C. M must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix op( B
  ) and the number of columns of the matrix C. N must be at least zero.

   K
  K is INTEGER On entry, K specifies the number of columns of the matrix op( A
  ) and the number of rows of the matrix op( B ). K must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, ka ), where ka is k when
  TRANSA = 'N' or 'n', and is m otherwise.  Before entry with TRANSA = 'N' or
  'n', the leading m by k part of the array A must contain the matrix A,
  otherwise the leading k by m part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANSA = 'N' or 'n' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, k ).

   B
  B is DOUBLE PRECISION array, dimension ( LDB, kb ), where kb is n when
  TRANSB = 'N' or 'n', and is k otherwise.  Before entry with TRANSB = 'N' or
  'n', the leading k by n part of the array B must contain the matrix B,
  otherwise the leading n by k part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANSB = 'N' or 'n' then LDB must be at
  least max( 1, k ), otherwise LDB must be at least max( 1, n ).

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then C need not be set on input.

   C
  C is DOUBLE PRECISION array, dimension ( LDC, N ) Before entry, the leading
  m by n part of the array C must contain the matrix C, except when beta is
  zero, in which case C need not be set on entry.  On exit, the array C is
  overwritten by the m by n matrix ( alpha*op( A )*op( B ) + beta*C ).

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dgemm(3m_blas)
dgemv(3m_blas)							dgemv(3m_blas)



NAME
  dgemv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dgemv(trans,m,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: incx,incy,lda,m,n
	character,intent(in)	       :: trans
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),x(*)
	double precision,intent(inout) :: y(*)
	..


DEFINITION
  DGEMV performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  matrix.

OPTIONS
   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**T*x + beta*y.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry, the leading
  m by n part of the array A must contain the matrix of coefficients.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ) when TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) )
  otherwise.  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( m - 1 )*abs( INCY )
  ) when TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) )
  otherwise.  Before entry with BETA non-zero, the incremented array Y must
  contain the vector y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dgemv(3m_blas)
dger(3m_blas)							 dger(3m_blas)



NAME
  dger(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dger(m,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: incx,incy,lda,m,n
	..
	.. Array Arguments ..
	double precision,intent(in)    :: x(*),y(*)
	double precision,intent(inout) :: a(lda,*)
	..


DEFINITION
  DGER performs the rank 1 operation

      A := alpha*x*y**T + A,

  where alpha is a scalar, x is an m element vector, y is an n element vector
  and A is an m by n matrix.

OPTIONS
   M
  M is INTEGER On entry, M specifies the number of rows of the matrix A.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix A.  N
  must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( m - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the m element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the n element vector
  y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry, the leading
  m by n part of the array A must contain the matrix of coefficients. On exit,
  A is overwritten by the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 dger(3m_blas)
dnrm2(3m_blas)							dnrm2(3m_blas)



NAME
  dnrm2(3f) - [BLAS:SINGLE_BLAS_LEVEL1] returns the euclidean norm of a vector
  via the function name


SYNOPSIS
  double precision function dnrm2(n,x,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx, n
	..
	.. Array Arguments ..
	real(wp),intent(in) :: x(*)
	 ..


DEFINITION
  DNRM2 returns the euclidean norm of a vector via the function name, so that

      DNRM2 := sqrt( x'*x )


OPTIONS
   N
  number of elements in input vector(s)

   X
  X is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER, storage spacing between elements of X

	     If INCX > 0, X(1+(i-1)*INCX) = x(i) for 1 <= i <= n
	     If INCX < 0, X(1-(n-i)*INCX) = x(i) for 1 <= i <= n
	     If INCX = 0, x isn't a vector so there is no need to call
	     this subroutine. If you call it anyway, it will count x(1)
	     in the vector norm N times.


AUTHORS
  •  Edward Anderson, Lockheed Martin

   date:August 2016

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

  Blue, James L. (1978) A Portable Fortran Program to Find the Euclidean Norm
  of a Vector ACM Trans Math Softw 4:15--23
  https://doi.org/10.1145/355769.355771

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dnrm2(3m_blas)
drot(3m_blas)							 drot(3m_blas)



NAME
  drot(3f) - [BLAS:SINGLE_BLAS_LEVEL1] DROT applies a plane rotation.


SYNOPSIS
  subroutine drot(n,dx,incx,dy,incy,c,s) applies a plane rotation.

	.. Scalar Arguments ..
	double precision,intent(in)    :: c,s
	integer,intent(in)	       :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(inout) :: dx(*),dy(*)
	..


DEFINITION
  DROT applies a plane rotation.

OPTIONS
   N
  number of elements in input vector(s)

   DX
  array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  storage spacing between elements of DY

   C
   S
AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017

   \ingroup double_blas_level1


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 drot(3m_blas)
drotg(3m_blas)							drotg(3m_blas)



NAME
  drotg(3f) - [BLAS:SINGLE_BLAS_LEVEL1] constructs a plane rotation


SYNOPSIS
  subroutine DROTG( a, b, c, s )

      .. Scalar Arguments ..
      real(wp),intent(inout) :: a, b
      real(wp),intent(out)   :: c, s


DEFINITION
  DROTG constructs a plane rotation

       [  c  s ] [ a ] = [ r ]
       [ -s  c ] [ b ]	 [ 0 ]

  satisfying c**2 + s**2 = 1.

  The computation uses the formulas

      sigma = sgn(a)	if |a| >  |b|
	    = sgn(b)	if |b| >= |a|
      r = sigma*sqrt( a**2 + b**2 )
      c = 1; s = 0	if r = 0
      c = a/r; s = b/r	if r != 0

  The subroutine also computes

      z = s    if |a| > |b|,
	= 1/c  if |b| >= |a| and c != 0
	= 1    if c = 0

  This allows c and s to be reconstructed from z as follows:

      If z = 1, set c = 0, s = 1.
      If |z| < 1, set c = sqrt(1 - z**2) and s = z.
      If |z| > 1, set c = 1/z and s = sqrt( 1 - c**2).


OPTIONS
   A
  On entry, the scalar a.  On exit, the scalar r.

   B
  On entry, the scalar b.  On exit, the scalar z.

   C
  The scalar c.

   S
  The scalar s.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA

   \ingroup single_blas_level1


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			drotg(3m_blas)
drotm(3m_blas)							drotm(3m_blas)



NAME
  drotm(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Apply the Modified Givens
  Transformation, H, to the 2 by N matrix


SYNOPSIS
  subroutine drotm(n,dx,incx,dy,incy,dparam)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(in)    :: dparam(5)
	double precision,intent(inout) :: dx(*),dy(*)
	..


DEFINITION
  Apply the Modified Givens Transformation, H, to the 2 by N matrix

  (DX**T) , where **T indicates transpose. the elements of DX are in (DY**T)

  DX(LX+I*INCX), I = 0 to N-1, where LX = 1 if INCX .ge. 0, else LX =
  (-INCX)*N, and similarly for SY using LY and INCY.  with DPARAM(1)=DFLAG, H
  has one of the following forms..

	 DFLAG=-1.D0	 DFLAG=0.D0	   DFLAG=1.D0	  DFLAG=-2.D0

	   (DH11  DH12)    (1.D0  DH12)    (DH11  1.D0)    (1.D0  0.D0)
	 H=(	      )    (	      )    (	      )    (	      )
	   (DH21  DH22),   (DH21  1.D0),   (-1.D0 DH22),   (0.D0  1.D0).

  SEE DROTMG FOR A DESCRIPTION OF DATA STORAGE IN DPARAM.

OPTIONS
   N
  number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  storage spacing between elements of DY

   DPARAM
  array, dimension (5)

	     DPARAM(1)=DFLAG
	     DPARAM(2)=DH11
	     DPARAM(3)=DH21
	     DPARAM(4)=DH12
	     DPARAM(5)=DH22


AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017

   \ingroup double_blas_level1


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			drotm(3m_blas)
drotmg(3m_blas) 					       drotmg(3m_blas)



NAME
  drotmg(3f) - [BLAS:DOUBLE_BLAS_LEVEL1]


SYNOPSIS
  subroutine drotmg(dd1,dd2,dx1,dy1,dparam)

	.. Scalar Arguments ..
	double precision,intent(inout) :: dd1,dd2,dx1
	double precision,intent(in)    :: dy1
	..
	.. Array Arguments ..
	double precision,intent(out)   :: dparam(5)
	..


DEFINITION
   CONSTRUCT THE MODIFIED GIVENS TRANSFORMATION MATRIX H WHICH ZEROS
  THE SECOND COMPONENT OF THE 2-VECTOR (DSQRT(DD1)*DX1,DSQRT(DD2)*> DY2)**T.
  WITH DPARAM(1)=DFLAG, H HAS ONE OF THE FOLLOWING FORMS..

	 DFLAG=-1.D0	 DFLAG=0.D0	   DFLAG=1.D0	  DFLAG=-2.D0

	   (DH11  DH12)    (1.D0  DH12)    (DH11  1.D0)    (1.D0  0.D0)
	 H=(	      )    (	      )    (	      )    (	      )
	   (DH21  DH22),   (DH21  1.D0),   (-1.D0 DH22),   (0.D0  1.D0).

  LOCATIONS 2-4 OF DPARAM CONTAIN DH11, DH21, DH12, AND DH22 RESPECTIVELY.
  (VALUES OF 1.D0, -1.D0, OR 0.D0 IMPLIED BY THE VALUE OF DPARAM(1) ARE NOT
  STORED IN DPARAM.)

   THE VALUES OF GAMSQ AND RGAMSQ SET IN THE DATA STATEMENT MAY BE
  INEXACT. THIS IS OK AS THEY ARE ONLY USED FOR TESTING THE SIZE OF DD1 AND
  DD2. ALL ACTUAL SCALING OF DATA IS DONE USING GAM.

OPTIONS
  DD1

	    DD1 is DOUBLE PRECISION

  DD2

	    DD2 is DOUBLE PRECISION

  DX1

	    DX1 is DOUBLE PRECISION

  DY1

	    DY1 is DOUBLE PRECISION


   DPARAM
  DPARAM is DOUBLE PRECISION array, dimension (5) DPARAM(1)=DFLAG
  DPARAM(2)=DH11 DPARAM(3)=DH21 DPARAM(4)=DH12 DPARAM(5)=DH22

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       drotmg(3m_blas)
dsbmv(3m_blas)							dsbmv(3m_blas)



NAME
  dsbmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dsbmv(uplo,n,k,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: incx,incy,k,lda,n
	character,intent(in)	       :: uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),x(*)
	double precision,intent(inout) :: y(*)
	..


DEFINITION
  DSBMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric band matrix, with k super-diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the band matrix A is being supplied as follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    being supplied.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    being supplied.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry, K specifies the number of super-diagonals of the
  matrix A. K must satisfy 0 .le. K.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading ( k + 1 ) by n part of the array A must contain the
  upper triangular band part of the symmetric matrix, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer the upper triangular part of a
  symmetric band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the symmetric matrix,
  supplied column by column, with the leading diagonal of the matrix in row 1
  of the array, the first sub-diagonal starting at position 1 in row 2, and so
  on. The bottom right k by k triangle of the array A is not referenced.  The
  following program segment will transfer the lower triangular part of a
  symmetric band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the vector y. On
  exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsbmv(3m_blas)
dscal(3m_blas)							dscal(3m_blas)



NAME
  dscal(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] scales a vector by a constant.


SYNOPSIS
  subroutine dscal(n,da,dx,incx)

	.. Scalar Arguments ..
	double precision,intent(in)    :: da
	integer,intent(in)	       :: incx,n
	..
	.. Array Arguments ..
	double precision,intent(inout) :: dx(*)
	..


DEFINITION
  DSCAL scales a vector by a constant.	uses unrolled loops for increment
  equal to 1.

OPTIONS
   N
  number of elements in input vector(s)

   DA
  On entry, DA specifies the scalar alpha.

   DX
  array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of DX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dscal(3m_blas)
dsdot(3m_blas)							dsdot(3m_blas)



NAME
  dsdot(3f) - [BLAS:DOUBLE_BLAS_LEVEL1]


SYNOPSIS
  double precision function dsdot(n,sx,incx,sy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	real,intent(in) :: sx(*),sy(*)
	..



DEFINITION
  Compute the inner product of two vectors with extended precision
  accumulation and result.

  Returns D.P. dot product accumulated in D.P., for S.P. SX and SY DSDOT = sum
  for I = 0 to N-1 of SX(LX+I*INCX) * SY(LY+I*INCY), where LX = 1 if INCX .GE.
  0, else LX = 1+(1-N)*INCX, and LY is defined in a similar way using INCY.

OPTIONS
  N number of elements in input vector(s)

  SX
    array, dimension(N) single precision vector with N elements

  INCX
    storage spacing between elements of SX

  SY
    array, dimension(N) single precision vector with N elements

  INCY
    storage spacing between elements of SY

RETURN
  DSDOT
    dot product (zero if N.LE.0)

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Lawson, C. L., (JPL), Hanson, R. J., (SNLA), Kincaid, D. R., (U. of Texas),
  Krogh, F. T., (JPL)

   REFERENCES
  C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.  Krogh, Basic linear
  algebra subprograms for Fortran usage, Algorithm No. 539, Transactions on
  Mathematical Software 5, 3 (September 1979), pp. 308-323.

   REVISION HISTORY
  1979-10-01
    DATE WRITTEN

  1989-08-31
    Modified array declarations. (WRB)

  1989-08-31
    REVISION DATE from Version 3.2

  1989-12-14
    Prologue converted to Version 4.0 format. (BAB)

  1992-03-10
    Corrected definition of LX in DESCRIPTION. (WRB)

  1992-05-01
    Reformatted the REFERENCES section. (WRB)

  1907-01-18
    Reformat to LAPACK style (JL)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsdot(3m_blas)
dspmv(3m_blas)							dspmv(3m_blas)



NAME
  dspmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dspmv(uplo,n,alpha,ap,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: incx,incy,n
	character,intent(in)	       :: uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: ap(*),x(*)
	double precision,intent(inout) :: y(*)
	..


DEFINITION
  DSPMV performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   AP
  AP is DOUBLE PRECISION array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular part of the symmetric matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  1, 2 ) and a( 2, 2 ) respectively, and so on.  Before entry with UPLO = 'L'
  or 'l', the array AP must contain the lower triangular part of the symmetric
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and
  so on.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the n element vector
  y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dspmv(3m_blas)
dspr2(3m_blas)							dspr2(3m_blas)



NAME
  dspr2(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dspr2(uplo,n,alpha,x,incx,y,incy,ap)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: incx,incy,n
	character,intent(in)		:: uplo
	..
	.. Array Arguments ..
	double precision,intent(inout) :: ap(*)
	double precision,intent(in)    :: x(*),y(*)
	..


DEFINITION
  DSPR2 performs the symmetric rank 2 operation

      A := alpha*x*y**T + alpha*y*x**T + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the n element vector
  y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   AP
  AP is DOUBLE PRECISION array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular part of the symmetric matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  1, 2 ) and a( 2, 2 ) respectively, and so on. On exit, the array AP is
  overwritten by the upper triangular part of the updated matrix.  Before
  entry with UPLO = 'L' or 'l', the array AP must contain the lower triangular
  part of the symmetric matrix packed sequentially, column by column, so that
  AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3,
  1 ) respectively, and so on. On exit, the array AP is overwritten by the
  lower triangular part of the updated matrix.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dspr2(3m_blas)
dspr(3m_blas)							 dspr(3m_blas)



NAME
  dspr(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dspr(uplo,n,alpha,x,incx,ap)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: incx,n
	character,intent(in)	       :: uplo
	..
	.. Array Arguments ..
	double precision,intent(inout) :: ap(*)
	double precision,intent(in)    :: x(*)
	..


DESCRIPTION
  DSPR performs the symmetric rank 1 operation

      A := alpha*x*x**T + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  symmetric matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   AP
  AP is DOUBLE PRECISION array, dimension at least ( ( n*( n + 1 ) )/2 ).

    Before entry with
      UPLO = 'U' or 'u', the array AP must contain the upper triangular part
      of the symmetric matrix packed sequentially, column by column, so that
      AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a(
      2, 2 ) respectively, and so on. On exit, the array AP is overwritten by
      the upper triangular part of the updated matrix.	Before entry with UPLO
      = 'L' or 'l', the array AP must contain the lower triangular part of the
      symmetric matrix packed sequentially, column by column, so that AP( 1 )
      contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 )
      respectively, and so on. On exit, the array AP is overwritten by the
      lower triangular part of the updated matrix.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 dspr(3m_blas)
dswap(3m_blas)							dswap(3m_blas)



NAME
  dswap(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] interchanges two vectors.


SYNOPSIS
  subroutine dswap(n,dx,incx,dy,incy)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(inout) :: dx(*),dy(*)
	..


DEFINITION
  DSWAP interchanges two vectors.  uses unrolled loops for increments equal to
  1.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of DY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dswap(3m_blas)
dsymm(3m_blas)							dsymm(3m_blas)



NAME
  dsymm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dsymm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: lda,ldb,ldc,m,n
	character,intent(in)	       :: side,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),b(ldb,*)
	double precision,intent(inout) :: c(ldc,*)
	..


DEFINITION
  DSYMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is a symmetric matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the symmetric matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the symmetric matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    symmetric matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    symmetric matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, ka ), where ka is m when SIDE
  = 'L' or 'l' and is n otherwise.

    Before entry with SIDE = 'L' or 'l', the m by m part of the array A must
    contain the symmetric matrix, such that when UPLO = 'U' or 'u', the
    leading m by m upper triangular part of the array A must contain the upper
    triangular part of the symmetric matrix and the strictly lower triangular
    part of A is not referenced, and when UPLO = 'L' or 'l', the leading m by
    m lower triangular part of the array A must contain the lower triangular
    part of the symmetric matrix and the strictly upper triangular part of A
    is not referenced.	Before entry with SIDE = 'R' or 'r', the n by n part
    of the array A must contain the symmetric matrix, such that when UPLO =
    'U' or 'u', the leading n by n upper triangular part of the array A must
    contain the upper triangular part of the symmetric matrix and the strictly
    lower triangular part of A is not referenced, and when UPLO = 'L' or 'l',
    the leading n by n lower triangular part of the array A must contain the
    lower triangular part of the symmetric matrix and the strictly upper
    triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is DOUBLE PRECISION array, dimension ( LDB, N ) Before entry, the leading
  m by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then C need not be set on input.

   C
  C is DOUBLE PRECISION array, dimension ( LDC, N ) Before entry, the leading
  m by n part of the array C must contain the matrix C, except when beta is
  zero, in which case C need not be set on entry.  On exit, the array C is
  overwritten by the m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsymm(3m_blas)
dsymv(3m_blas)							dsymv(3m_blas)



NAME
  dsymv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dsymv(uplo,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: incx,incy,lda,n
	character,intent(in)	       :: uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),x(*)
	double precision,intent(inout) :: y(*)
	..


DEFINITION
  DSYMV performs the matrix-vector
    operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of A is not referenced.  Before entry with UPLO = 'L'
  or 'l', the leading n by n lower triangular part of the array A must contain
  the lower triangular part of the symmetric matrix and the strictly upper
  triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta. When
  BETA is supplied as zero then Y need not be set on input.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the n element vector
  y. On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsymv(3m_blas)
dsyr2(3m_blas)							dsyr2(3m_blas)



NAME
  dsyr2(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dsyr2(uplo,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: incx,incy,lda,n
	character,intent(in)	       :: uplo
	..
	.. Array Arguments ..
	double precision,intent(inout) :: a(lda,*)
	double precision,intent(in)    :: x(*),y(*)
	..


DEFINITION
  DSYR2 performs the symmetric rank 2 operation

      A := alpha*x*y**T + alpha*y*x**T + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCY )
  ).  Before entry, the incremented array Y must contain the n element vector
  y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of A is not referenced. On exit, the upper triangular
  part of the array A is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsyr2(3m_blas)
dsyr2k(3m_blas) 					       dsyr2k(3m_blas)



NAME
  dsyr2k(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dsyr2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: k,lda,ldb,ldc,n
	character,intent(in)	       :: trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*),b(ldb,*)
	double precision,intent(inout) :: c(ldc,*)
	..


DEFINITION
  DSYR2K performs one of the symmetric rank 2k operations

      C := alpha*A*B**T + alpha*B*A**T + beta*C,

  or

      C := alpha*A**T*B + alpha*B**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A and
  B are n by k matrices in the first case and k by n matrices in the second
  case.

OPTIONS
   UPLO
  On entry, UPLO specifies whether the upper or lower triangular part of the
  array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  On entry, TRANS specifies the operation to be performed as follows:

		TRANS = 'N' or 'n'   C := alpha*A*B**T + alpha*B*A**T +
					  beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*B + alpha*B**T*A +
					  beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**T*B + alpha*B**T*A +
					  beta*C.


   N
  On entry, N specifies the order of the matrix C. N must be at least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'T' or 't' or 'C'
  or 'c', K specifies the number of rows of the matrices A and B. K must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, ka ), where ka is k when TRANS
  = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the
  leading n by k part of the array A must contain the matrix A, otherwise the
  leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared

    in the
      calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at least
      max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is DOUBLE PRECISION array, dimension ( LDB, kb ), where kb is k when TRANS
  = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the
  leading n by k part of the array B must contain the matrix B, otherwise the
  leading k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta.

   C
  C is DOUBLE PRECISION array, dimension ( LDC, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       dsyr2k(3m_blas)
dsyr(3m_blas)							 dsyr(3m_blas)



NAME
  dsyr(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dsyr(uplo,n,alpha,x,incx,a,lda)

	.. Scalar Arguments ..
	double precision,intent(in)	  :: alpha
	integer,intent(in)		  :: incx,lda,n
	character,intent(in)		  :: uplo
	..
	.. Array Arguments ..
	double precision,intent(inout)	  :: a(lda,*)
	double precision,intent(in)	  :: x(*)
	..


DEFINITION
  DSYR performs the symmetric rank 1 operation

      A := alpha*x*x**T + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  symmetric matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of A is not referenced. On exit, the upper triangular
  part of the array A is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016

   \ingroup double_blas_level2


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 dsyr(3m_blas)
dsyrk(3m_blas)							dsyrk(3m_blas)



NAME
  dsyrk(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dsyrk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha,beta
	integer,intent(in)	       :: k,lda,ldc,n
	character,intent(in)	       :: trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: c(ldc,*)
	..


DEFINITION
  DSYRK performs one of the symmetric rank k operations

      C := alpha*A*A**T + beta*C,

  or

      C := alpha*A**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A is
  an n by k matrix in the first case and a k by n matrix in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**T + beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*A + beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**T*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrix A, and on entry with TRANS = 'T' or 't' or 'C' or 'c',
  K specifies the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, ka ), where ka is k when TRANS
  = 'N' or 'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the
  leading n by k part of the array A must contain the matrix A, otherwise the
  leading k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is DOUBLE PRECISION.  On entry, BETA specifies the scalar beta.

   C
  C is DOUBLE PRECISION array, dimension ( LDC, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array C must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of C is not referenced. On exit, the upper triangular
  part of the array C is overwritten by the upper triangular part of the
  updated matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array C must contain the lower triangular part
  of the symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016

   \ingroup double_blas_level3


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dsyrk(3m_blas)
dtbmv(3m_blas)							dtbmv(3m_blas)



NAME
  dtbmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dtbmv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,k,lda,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTBMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular band matrix, with ( k + 1 ) diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading ( k + 1 ) by n part of the array A must contain the
  upper triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016

   \ingroup double_blas_level2


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtbmv(3m_blas)
dtbsv(3m_blas)							dtbsv(3m_blas)



NAME
  dtbsv(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dtbsv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,k,lda,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTBSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular band matrix, with ( k + 1 ) diagonals.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading ( k + 1 ) by n part of the array A must contain the
  upper triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element right-
  hand side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016

   \ingroup double_blas_level2


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtbsv(3m_blas)
dtpmv(3m_blas)							dtpmv(3m_blas)



NAME
  dtpmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dtpmv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: ap(*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTPMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is DOUBLE PRECISION array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular matrix packed sequentially, column by column, so that AP( 1 )
  contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  2, 1 ) and a( 3, 1 ) respectively, and so on.  Note that when DIAG = 'U' or
  'u', the diagonal elements of A are not referenced, but are assumed to be
  unity.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016

   \ingroup double_blas_level2


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtpmv(3m_blas)
dtpsv(3m_blas)							dtpsv(3m_blas)



NAME
  dtpsv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dtpsv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: ap(*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTPSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix, supplied in packed form.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is DOUBLE PRECISION array, dimension at least ( ( n*( n + 1 ) )/2 ).
  Before entry with UPLO = 'U' or 'u', the array AP must contain the upper
  triangular matrix packed sequentially, column by column, so that AP( 1 )
  contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular matrix packed sequentially, column by
  column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a(
  2, 1 ) and a( 3, 1 ) respectively, and so on.  Note that when DIAG = 'U' or
  'u', the diagonal elements of A are not referenced, but are assumed to be
  unity.

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element right-
  hand side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtpsv(3m_blas)
dtrmm(3m_blas)							dtrmm(3m_blas)



NAME
  dtrmm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dtrmm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: lda,ldb,m,n
	character,intent(in)	       :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: b(ldb,*)
	..


DEFINITION
  DTRMM performs one of the matrix-matrix operations

      B := alpha*op( A )*B,   or   B := alpha*B*op( A ),

  where alpha is a scalar, B is an m by n matrix, A is a unit, or non-unit,
  upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T.


OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) multiplies B
  from the left or right as follows:

		SIDE = 'L' or 'l'   B := alpha*op( A )*B.

		SIDE = 'R' or 'r'   B := alpha*B*op( A ).


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**T.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha. When
  alpha is zero then A is not referenced and B need not be set before entry.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, k ), where k is m when SIDE =
  'L' or 'l' and is n when SIDE = 'R' or 'r'.  Before entry with UPLO = 'U' or
  'u', the leading k by k upper triangular part of the array A must contain
  the upper triangular matrix and the strictly lower triangular part of A is
  not referenced.  Before entry with UPLO = 'L' or 'l', the leading k by k
  lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is DOUBLE PRECISION array, dimension ( LDB, N ) Before entry, the leading
  m by n part of the array B must contain the matrix B, and on exit is
  overwritten by the transformed matrix.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtrmm(3m_blas)
dtrmv(3m_blas)							dtrmv(3m_blas)



NAME
  dtrmv(3f) - [BLAS:DOUBLE_BLAS_LEVEL2]


SYNOPSIS
  subroutine dtrmv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,lda,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTRMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**T*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular matrix and the strictly lower triangular part
  of A is not referenced.  Before entry with UPLO = 'L' or 'l', the leading n
  by n lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element vector
  x. On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtrmv(3m_blas)
dtrsm(3m_blas)							dtrsm(3m_blas)



NAME
  dtrsm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]


SYNOPSIS
  subroutine dtrsm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	double precision,intent(in)    :: alpha
	integer,intent(in)	       :: lda,ldb,m,n
	character,intent(in)	       :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: b(ldb,*)
	..


DEFINITION
  DTRSM solves one of the matrix equations

      op( A )*X = alpha*B,   or   X*op( A ) = alpha*B,

  where alpha is a scalar, X and B are m by n matrices, A is a unit, or non-
  unit, upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T.

  The matrix X is overwritten on B.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) appears on the
  left or right of X as follows:

		SIDE = 'L' or 'l'   op( A )*X = alpha*B.

		SIDE = 'R' or 'r'   X*op( A ) = alpha*B.


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**T.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is DOUBLE PRECISION.  On entry, ALPHA specifies the scalar alpha. When
  alpha is zero then A is not referenced and B need not be set before entry.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, k ),

	     where k is m when SIDE = 'L' or 'l'
	       and k is n when SIDE = 'R' or 'r'.

	     Before entry with UPLO = 'U' or 'u', the leading k by k
	     upper triangular part of the array A must contain the upper
	     triangular matrix and the strictly lower triangular part of
	     A is not referenced.

	     Before entry with UPLO = 'L' or 'l', the leading k by k
	     lower triangular part of the array A must contain the lower
	     triangular matrix and the strictly upper triangular part of
	     A is not referenced.

	     Note that when DIAG = 'U' or 'u', the diagonal elements of
	     A are not referenced either, but are assumed to be unity.


   LDA
  On entry, LDA specifies the first dimension of A as declared in the calling
  (sub) program. When SIDE = 'L' or 'l' then LDA must be at least max( 1, m ),
  when SIDE = 'R' or 'r' then LDA must be at least max( 1, n ).

   B
  Before entry, the leading m by n part of the array B must contain the right-
  hand side matrix B, and on exit is overwritten by the solution matrix X.

   LDB
  On entry, LDB specifies the first dimension of B as declared in the calling
  (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtrsm(3m_blas)
dtrsv(3m_blas)							dtrsv(3m_blas)



NAME
  dtrsv(3f) - [BLAS:DOUBLE_BLAS_LEVEL1]


SYNOPSIS
  subroutine dtrsv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)	       :: incx,lda,n
	character,intent(in)	       :: diag,trans,uplo
	..
	.. Array Arguments ..
	double precision,intent(in)    :: a(lda,*)
	double precision,intent(inout) :: x(*)
	..


DEFINITION
  DTRSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**T*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is DOUBLE PRECISION array, dimension ( LDA, N ) Before entry with UPLO =
  'U' or 'u', the leading n by n upper triangular part of the array A must
  contain the upper triangular matrix and the strictly lower triangular part
  of A is not referenced.  Before entry with UPLO = 'L' or 'l', the leading n
  by n lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is DOUBLE PRECISION array, dimension at least ( 1 + ( n - 1 )*abs( INCX )
  ).  Before entry, the incremented array X must contain the n element right-
  hand side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

  Level 2 Blas routine.

    -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.
    Jeremy Du Croz, Nag Central Office.  Sven Hammarling, Nag Central Office.
    Richard Hanson, Sandia National Labs.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dtrsv(3m_blas)
dzasum(3m_blas) 					       dzasum(3m_blas)



NAME
  dzasum(3f) - [BLAS:DOUBLE_BLAS_LEVEL1]


SYNOPSIS
  double precision function dzasum(n,zx,incx)

	.. Scalar Arguments ..
	integer,intent(in)		   :: incx,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(inout) :: zx(*)
	..


DEFINITION
  DZASUM takes the sum of the (|Re(.)| + |Im(.)|)'s of a complex vector and
  returns a double precision result.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   ZX
  ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of ZX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 3/11/78.  modified 3/93 to return if incx .le. 0.  modified
  12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       dzasum(3m_blas)
dznrm2(3m_blas) 					       dznrm2(3m_blas)



NAME
  dznrm2(3f) - [BLAS:SINGLE_BLAS_LEVEL1]


SYNOPSIS
  double precision function dznrm2(n,x,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx, n
	..


DEFINITION
  DZNRM2 returns the euclidean norm of a vector via the function name, so that

      DZNRM2 := sqrt( x**H*x )


OPTIONS
   N
  number of elements in input vector(s)

   X
  array, dimension (N) complex vector with N elements

   INCX
  INCX is INTEGER, storage spacing between elements of X

	      If INCX > 0, X(1+(i-1)*INCX) = x(i) for 1 <= i <= n
	      If INCX < 0, X(1-(n-i)*INCX) = x(i) for 1 <= i <= n
	      If INCX = 0, x isn't a vector so there is no need to call

  this subroutine. If you call it anyway, it will count x(1) in the vector
  norm N times.

AUTHORS
  •  Edward Anderson, Lockheed Martin

   date:August 2016

   \par Contributors:

   Weslley Pereira, University of Colorado Denver, USA


   FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

  Blue, James L. (1978) A Portable Fortran Program to Find the Euclidean Norm
  of a Vector ACM Trans Math Softw 4:15--23
  https://doi.org/10.1145/355769.355771

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       dznrm2(3m_blas)
cdotu(3m_blas)							cdotu(3m_blas)



NAME
  cdotu(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] CDOTU := SUM CX * CY (unconjugated
  vector dot product)


SYNOPSIS
  complex function cdotu(n,cx,incx,cy,incy)

	.. Scalar Arguments ..
	integer,intent(in) ::  incx,incy,n
	..
	.. Array Arguments ..
	complex,intent(in) ::  cx(*),cy(*)
	..


DEFINITION
  CDOTU forms the dot product of two complex vectors

	CDOTU = X^T * Y


OPTIONS
   N
  number of elements in input vector(s)

   CX
  array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of CX

   CY
  array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  storage spacing between elements of CY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cdotu(3m_blas)
cgbmv(3m_blas)							cgbmv(3m_blas)



NAME
  cgbmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A is
  a rectangular band matrix).


SYNOPSIS
  subroutine cgbmv(trans,m,n,kl,ku,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: incx,incy,kl,ku,lda,m,n
	character,intent(in)  :: trans
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),x(*)
	complex,intent(inout) :: y(*)
	..


DESCRIPTION
  CGBMV
    performs one of the matrix-vector operations

      y := alpha*A*x + beta*y,	 or   y := alpha*A**T*x + beta*y,   or

      y := alpha*A**H*x + beta*y,

  where alpha and beta are scalars, x and y are vectors and A is an m by n
  band matrix, with kl sub-diagonals and ku super-diagonals.

OPTIONS
   TRANS
  On entry, TRANS specifies the operation to be performed as follows:

		TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.

		TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.

		TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.


   M
  On entry, M specifies the number of rows of the matrix A.  M must be at
  least zero.

   N
  On entry, N specifies the number of columns of the matrix A.	N must be at
  least zero.

   KL
  On entry, KL specifies the number of sub-diagonals of the

  matrix A. KL must satisfy
    0 .le. KL.

   KU
  On entry, KU specifies the number of super-diagonals of the

  matrix A. KU must satisfy
    0 .le. KU.

   ALPHA
  On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry, the leading ( kl + ku
  + 1 ) by n part of the array A must contain the matrix of coefficients,
  supplied column by column, with the leading diagonal of the matrix in row (
  ku + 1 ) of the array, the first super-diagonal starting at position 2 in
  row ku, the first sub-diagonal starting at position 1 in row ( ku + 2 ), and
  so on.

  Elements in the array A that do not correspond to elements in the band
  matrix (such as the top left ku by ku triangle) are not referenced.

  The following program segment will transfer a band matrix from conventional
  full matrix storage to band storage:

		   DO 20, J = 1, N
		      K = KU + 1 - J
		      DO 10, I = MAX( 1, J - KU ), MIN( M, J + KL )
			 A( K + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

   LDA
  On entry, LDA specifies the first dimension of A as declared in the calling
  (sub) program. LDA must be at least ( kl + ku + 1 ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ) when
  TRANS = 'N' or 'n' and at least ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.
  Before entry, the incremented array X must contain the vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then Y need not be set on input.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( m - 1 )*abs( INCY ) ) when
  TRANS = 'N' or 'n' and at least ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.
  Before entry, the incremented array Y must contain the vector y. On exit, Y
  is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cgbmv(3m_blas)
cgemm(3m_blas)							cgemm(3m_blas)



NAME
  cgemm(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*B+beta*C; ==> A, B, C
  rectangular.


SYNOPSIS
  subroutine cgemm(transa,transb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: k,lda,ldb,ldc,m,n
	character,intent(in)  :: transa,transb
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),b(ldb,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CGEMM performs one of the matrix-matrix operations

      C := alpha*op( A )*op( B ) + beta*C,

  where op( X ) is one of

      op( X ) = X   or	 op( X ) = X**T   or   op( X ) = X**H,

  alpha and beta are scalars, and A, B and C are matrices, with op( A )

  an m by k matrix,
    op( B )  a K by N matrix and C an M by N matrix.

OPTIONS
   TRANSA
  On entry, TRANSA specifies the form of op( A ) to be used in the matrix
  multiplication as follows:

		TRANSA = 'N' or 'n',  op( A ) = A.

		TRANSA = 'T' or 't',  op( A ) = A**T.

		TRANSA = 'C' or 'c',  op( A ) = A**H.


   TRANSB
  TRANSB is CHARACTER*1 On entry, TRANSB specifies the form of op( B ) to be
  used in the matrix multiplication as follows:

		TRANSB = 'N' or 'n',  op( B ) = B.

		TRANSB = 'T' or 't',  op( B ) = B**T.

		TRANSB = 'C' or 'c',  op( B ) = B**H.


   M
  On entry, M specifies the number of rows of the matrix op( A ) and of the
  matrix C. M must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix op( B
  ) and the number of columns of the matrix C. N must be at least zero.

   K
  K is INTEGER On entry, K specifies the number of columns of the matrix op( A
  ) and the number of rows of the matrix op( B ). K must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is k when TRANSA = 'N'
  or 'n', and is m otherwise.  Before entry with TRANSA = 'N' or 'n', the
  leading m by k part of the array A must contain the matrix A, otherwise the
  leading k by m part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANSA = 'N' or 'n' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, k ).

   B
  B is COMPLEX array, dimension ( LDB, kb ), where kb is n when TRANSB = 'N'
  or 'n', and is k otherwise.  Before entry with TRANSB = 'N' or 'n', the
  leading k by n part of the array B must contain the matrix B, otherwise the
  leading n by k part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANSB = 'N' or 'n' then LDB must be at
  least max( 1, k ), otherwise LDB must be at least max( 1, n ).

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then C need not be set on input.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry, the leading m by n
  part of the array C must contain the matrix C, except when beta is zero, in
  which case C need not be set on entry.  On exit, the array C is overwritten
  by the m by n matrix ( alpha*op( A )*op( B ) + beta*C ).

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cgemm(3m_blas)
chemm(3m_blas)							chemm(3m_blas)



NAME
  chemm(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C; ==> A
  hermitian, B, C rectangular.


SYNOPSIS
  subroutine chemm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: lda,ldb,ldc,m,n
	character,intent(in)  :: side,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),b(ldb,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CHEMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is an hermitian matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the hermitian matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the hermitian matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    hermitian matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    hermitian matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is m when SIDE = 'L' or
  'l' and is n otherwise.  Before entry with SIDE = 'L' or 'l', the m by m
  part of the array A must contain the hermitian matrix, such that when UPLO =
  'U' or 'u', the leading m by m upper triangular part of the array A must
  contain the upper triangular part of the hermitian matrix and the strictly
  lower triangular part of A is not referenced, and when UPLO = 'L' or 'l',
  the leading m by m lower triangular part of the array A must contain the
  lower triangular part of the hermitian matrix and the strictly upper
  triangular part of A is not referenced.  Before entry with SIDE = 'R' or
  'r', the n by n part of the array A must contain the hermitian matrix, such
  that when UPLO = 'U' or 'u', the leading n by n upper triangular part of the
  array A must contain the upper triangular part of the hermitian matrix and
  the strictly lower triangular part of A is not referenced, and when UPLO =
  'L' or 'l', the leading n by n lower triangular part of the array A must
  contain the lower triangular part of the hermitian matrix and the strictly
  upper triangular part of A is not referenced.  Note that the imaginary parts
  of the diagonal elements need not be set, they are assumed to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is COMPLEX array, dimension ( LDB, N ) Before entry, the leading m by n
  part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then C need not be set on input.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry, the leading m by n
  part of the array C must contain the matrix C, except when beta is zero, in
  which case C need not be set on entry.  On exit, the array C is overwritten
  by the m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			chemm(3m_blas)
chemv(3m_blas)							chemv(3m_blas)



NAME
  chemv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY; ==> A a
  (square) hermitian matrix.


SYNOPSIS
  subroutine chemv(uplo,n,alpha,a,lda,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: incx,incy,lda,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),x(*)
	complex,intent(inout) :: y(*)
	..


DEFINITION
  CHEMV
    performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array A must contain
  the upper triangular part of the hermitian matrix and the strictly lower
  triangular part of A is not referenced.  Before entry with UPLO = 'L' or
  'l', the leading n by n lower triangular part of the array A must contain
  the lower triangular part of the hermitian matrix and the strictly upper
  triangular part of A is not referenced.  Note that the imaginary parts of
  the diagonal elements need not be set and are assumed to be zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then Y need not be set on input.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			chemv(3m_blas)
cher2(3m_blas)							cher2(3m_blas)



NAME
  cher2(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-
  TRANSPOSE(CY)n + CONJUGATE(alpha)*CY*CONJUGATE-TRANSPOSE(CX); ==> n A a
  (square) hermitian matrix.  (performs the hermitian rank 2 operation)


SYNOPSIS
  subroutine cher2(uplo,n,alpha,x,incx,y,incy,a,lda)

	.. Scalar Arguments ..
	complex,intent(in)     :: alpha
	integer,intent(in)     :: incx,incy,lda,n
	character,intent(in)   :: uplo
	..
	.. Array Arguments ..
	complex,intent(inout)  :: a(lda,*)
	complex,intent(in)     :: x(*),y(*)
	..


DEFINITION
  CHER2 performs the hermitian rank 2 operation

      A := alpha*x*y**H + conjg( alpha )*y*x**H + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array A must contain
  the upper triangular part of the hermitian matrix and the strictly lower
  triangular part of A is not referenced. On exit, the upper triangular part
  of the array A is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular part of the
  hermitian matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cher2(3m_blas)
cher2k(3m_blas) 					       cher2k(3m_blas)



NAME
  cher2k(3f) - [BLAS:COMPLEX_BLAS_LEVEL3]
  C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C; ==> C hermitian.
  (performs one of the hermitian rank 2k operations)


SYNOPSIS
  subroutine cher2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	real,intent(in)       :: beta
	integer,intent(in)    :: k,lda,ldb,ldc,n
	character,intent(in)  :: trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),b(ldb,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CHER2K performs one of the hermitian rank 2k operations

      C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C,

  or

      C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C,

  where alpha and beta are scalars with beta real, C is an n by n hermitian
  matrix and A and B are n by k matrices in the first case and k by n matrices
  in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'    C := alpha*A*B**H 	 +
					   conjg( alpha )*B*A**H +
					   beta*C.

		TRANS = 'C' or 'c'    C := alpha*A**H*B 	 +
					   conjg( alpha )*B**H*A +
					   beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'C' or 'c', K
  specifies the number of rows of the matrices A and B. K must be at least
  zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is COMPLEX array, dimension ( LDB, kb ), where kb is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array B must contain the matrix B, otherwise the leading
  k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array C must contain
  the upper triangular part of the hermitian matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  hermitian matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

  -- Modified 8-Nov-93 to set C(J,J) to REAL( C(J,J) ) when BETA = 1.  Ed
  Anderson, Cray Research Inc.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       cher2k(3m_blas)
cherk(3m_blas)							cherk(3m_blas)



NAME
  cherk(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] performs one of the hermitian rank k
  operations C:=alpha*A*TRANSPOSE(A)+beta*C, C hermitian.


SYNOPSIS
  subroutine cherk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	real,intent(in)       :: alpha,beta
	integer,intent(in)    :: k,lda,ldc,n
	character,intent(in)  :: trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CHERK performs one of the hermitian rank k operations

      C := alpha*A*A**H + beta*C,

  or

      C := alpha*A**H*A + beta*C,

  where alpha and beta are real scalars, C is an n by n hermitian matrix and A
  is an n by k matrix in the first case and a k by n matrix in the second
  case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**H + beta*C.

		TRANS = 'C' or 'c'   C := alpha*A**H*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrix A, and on entry with TRANS = 'C' or 'c', K specifies
  the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is REAL On entry, BETA specifies the scalar beta.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array C must contain
  the upper triangular part of the hermitian matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  hermitian matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

  -- Modified 8-Nov-93 to set C(J,J) to REAL( C(J,J) ) when BETA = 1.  Ed
  Anderson, Cray Research Inc.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cherk(3m_blas)
chpmv(3m_blas)							chpmv(3m_blas)



NAME
  chpmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CY := alpha*A*CX + beta*CY, A a
  (square) hermitian packed matrix.


SYNOPSIS
  subroutine chpmv(uplo,n,alpha,ap,x,incx,beta,y,incy)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: incx,incy,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: ap(*),x(*)
	complex,intent(inout) :: y(*)
	..


DEFINITION
  CHPMV(3f) performs the matrix-vector operation

      y := alpha*A*x + beta*y,

  where alpha and beta are scalars, x and y are n element vectors and A is an
  n by n hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   AP
  AP is COMPLEX array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the hermitian matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on.  Before entry with UPLO = 'L' or 'l', the array AP
  must contain the lower triangular part of the hermitian matrix packed
  sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ), AP( 2 )
  and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.	Note
  that the imaginary parts of the diagonal elements need not be set and are
  assumed to be zero.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then Y need not be set on input.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.
  On exit, Y is overwritten by the updated vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			chpmv(3m_blas)
chpr2(3m_blas)							chpr2(3m_blas)



NAME
  chpr2(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] performs the hermitian rank 2
  operation A := A + alpha*CX*CONJUGATE-TRANSPOSE(CY)n +
  CONJUGATE(ALPHA)*CY*CONJUGATE-TRANSPOSE(CX),n A a (square) hermitian packed
  matrix.


SYNOPSIS
  subroutine chpr2(uplo,n,alpha,x,incx,y,incy,ap)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	integer,intent(in)    :: incx,incy,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(inout) :: ap(*)
	complex,intent(in)    :: x(*),y(*)
	..


DEFINITION
  CHPR2 performs the hermitian rank 2 operation

      A := alpha*x*y**H + conjg( alpha )*y*x**H + A,

  where alpha is a scalar, x and y are n element vectors and A is an n by n
  hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   Y
  Y is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCY ) ).
  Before entry, the incremented array Y must contain the n element vector y.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  Y. INCY must not be zero.

   AP
  AP is COMPLEX array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the hermitian matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on. On exit, the array AP is overwritten by the upper
  triangular part of the updated matrix.  Before entry with UPLO = 'L' or 'l',
  the array AP must contain the lower triangular part of the hermitian matrix
  packed sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ),
  AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.
  On exit, the array AP is overwritten by the lower triangular part of the
  updated matrix.  Note that the imaginary parts of the diagonal elements need
  not be set, they are assumed to be zero, and on exit they are set to zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			chpr2(3m_blas)
chpr(3m_blas)							 chpr(3m_blas)



NAME
  chpr(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] performs the hermitian rank 1
  operation A := A + alpha*CX*CONJUGATE-TRANSPOSE(CX), a a (square) hermitian
  packed.


SYNOPSIS
  subroutine chpr(uplo,n,alpha,x,incx,ap)

	.. Scalar Arguments ..
	real,intent(in)       :: alpha
	integer,intent(in)    :: incx,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(inout) :: ap(*)
	complex,intent(in)    :: x(*)
	..


DEFINITION
  CHPR performs the hermitian rank 1 operation

      A := alpha*x*x**H + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  hermitian matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the matrix A is supplied in the packed array AP as
  follows:

		UPLO = 'U' or 'u'   The upper triangular part of A is
				    supplied in AP.

		UPLO = 'L' or 'l'   The lower triangular part of A is
				    supplied in AP.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   AP
  AP is COMPLEX array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular part
  of the hermitian matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 )
  respectively, and so on. On exit, the array AP is overwritten by the upper
  triangular part of the updated matrix.  Before entry with UPLO = 'L' or 'l',
  the array AP must contain the lower triangular part of the hermitian matrix
  packed sequentially, column by column, so that AP( 1 ) contains a( 1, 1 ),
  AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 ) respectively, and so on.
  On exit, the array AP is overwritten by the lower triangular part of the
  updated matrix.  Note that the imaginary parts of the diagonal elements need
  not be set, they are assumed to be zero, and on exit they are set to zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 chpr(3m_blas)
cher(3m_blas)							 cher(3m_blas)



NAME
  cher(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] A := A + alpha*CX*CONJUGATE-
  TRANSPOSE(CX); ==> A a (square) hermitian matrix.  (performs the hermitian
  rank 1 operation)


SYNOPSIS
  subroutine cher(uplo,n,alpha,x,incx,a,lda)

	.. Scalar Arguments ..
	real,intent(in)       :: alpha
	integer,intent(in)    :: incx,lda,n
	character,intent(in)  :: uplo
	..
	.. Array Arguments ..
	complex,intent(inout) :: a(lda,*)
	complex,intent(in)    :: x(*)
	..


DEFINITION
  CHER performs the hermitian rank 1 operation

      A := alpha*x*x**H + A,

  where alpha is a real scalar, x is an n element vector and A is an n by n
  hermitian matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of A
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of A
				    is to be referenced.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   ALPHA
  ALPHA is REAL On entry, ALPHA specifies the scalar alpha.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array A must contain
  the upper triangular part of the hermitian matrix and the strictly lower
  triangular part of A is not referenced. On exit, the upper triangular part
  of the array A is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array A must contain the lower triangular part of the
  hermitian matrix and the strictly upper triangular part of A is not
  referenced. On exit, the lower triangular part of the array A is overwritten
  by the lower triangular part of the updated matrix.  Note that the imaginary
  parts of the diagonal elements need not be set, they are assumed to be zero,
  and on exit they are set to zero.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 cher(3m_blas)
csymm(3m_blas)							csymm(3m_blas)



NAME
  csymm(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*B+beta*C, A symmetric, B,
  C rectangular.


SYNOPSIS
  subroutine csymm(side,uplo,m,n,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: lda,ldb,ldc,m,n
	character,intent(in)  :: side,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),b(ldb,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CSYMM performs one of the matrix-matrix operations

      C := alpha*A*B + beta*C,

  or

      C := alpha*B*A + beta*C,

  where alpha and beta are scalars, A is a symmetric matrix and B and C are m
  by n matrices.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether the symmetric matrix A
  appears on the left or right in the operation as follows:

		SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,

		SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the symmetric matrix A is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the upper triangular part of the
				    symmetric matrix is to be referenced.

		UPLO = 'L' or 'l'   Only the lower triangular part of the
				    symmetric matrix is to be referenced.


   M
  M is INTEGER On entry, M specifies the number of rows of the matrix C.  M
  must be at least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of the matrix C.  N
  must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is m when SIDE = 'L' or
  'l' and is n otherwise.  Before entry with SIDE = 'L' or 'l', the m by m
  part of the array A must contain the symmetric matrix, such that when UPLO =
  'U' or 'u', the leading m by m upper triangular part of the array A must
  contain the upper triangular part of the symmetric matrix and the strictly
  lower triangular part of A is not referenced, and when UPLO = 'L' or 'l',
  the leading m by m lower triangular part of the array A must contain the
  lower triangular part of the symmetric matrix and the strictly upper
  triangular part of A is not referenced.  Before entry with SIDE = 'R' or
  'r', the n by n part of the array A must contain the symmetric matrix, such
  that when UPLO = 'U' or 'u', the leading n by n upper triangular part of the
  array A must contain the upper triangular part of the symmetric matrix and
  the strictly lower triangular part of A is not referenced, and when UPLO =
  'L' or 'l', the leading n by n lower triangular part of the array A must
  contain the lower triangular part of the symmetric matrix and the strictly
  upper triangular part of A is not referenced.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), otherwise LDA must be at least max( 1, n ).

   B
  B is COMPLEX array, dimension ( LDB, N ) Before entry, the leading m by n
  part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta. When BETA is
  supplied as zero then C need not be set on input.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry, the leading m by n
  part of the array C must contain the matrix C, except when beta is zero, in
  which case C need not be set on entry.  On exit, the array C is overwritten
  by the m by n updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			csymm(3m_blas)
csyr2k(3m_blas) 					       csyr2k(3m_blas)



NAME
  csyr2k(3f) - [BLAS:COMPLEX_BLAS_LEVEL3]
  C:=alpha*A*TRANSPOSE(B)+alpha*B*TRANSPOSE(A)+beta*C, C symmetric.


SYNOPSIS
  subroutine csyr2k(uplo,trans,n,k,alpha,a,lda,b,ldb,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: k,lda,ldb,ldc,n
	character,intent(in)  :: trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*),b(ldb,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CSYR2K performs one of the symmetric rank 2k operations

      C := alpha*A*B**T + alpha*B*A**T + beta*C,

  or

      C := alpha*A**T*B + alpha*B**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A and
  B are n by k matrices in the first case and k by n matrices in the second
  case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'    C := alpha*A*B**T + alpha*B*A**T +
					   beta*C.

		TRANS = 'T' or 't'    C := alpha*A**T*B + alpha*B**T*A +
					   beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrices A and B, and on entry with TRANS = 'T' or 't', K
  specifies the number of rows of the matrices A and B. K must be at least
  zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   B
  B is COMPLEX array, dimension ( LDB, kb ), where kb is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array B must contain the matrix B, otherwise the leading
  k by n part of the array B must contain the matrix B.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDB must be at
  least max( 1, n ), otherwise LDB must be at least max( 1, k ).

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array C must contain
  the upper triangular part of the symmetric matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       csyr2k(3m_blas)
csyrk(3m_blas)							csyrk(3m_blas)



NAME
  csyrk(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] C:=alpha*A*TRANSPOSE(A)+beta*C, C
  symmetric.


SYNOPSIS
  subroutine csyrk(uplo,trans,n,k,alpha,a,lda,beta,c,ldc)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha,beta
	integer,intent(in)    :: k,lda,ldc,n
	character,intent(in)  :: trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: c(ldc,*)
	..


DEFINITION
  CSYRK performs one of the symmetric rank k operations

      C := alpha*A*A**T + beta*C,

  or

      C := alpha*A**T*A + beta*C,

  where alpha and beta are scalars, C is an n by n symmetric matrix and A is
  an n by k matrix in the first case and a k by n matrix in the second case.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the upper or lower
  triangular part of the array C is to be referenced as follows:

		UPLO = 'U' or 'u'   Only the  upper triangular part of	C
				    is to be referenced.

		UPLO = 'L' or 'l'   Only the  lower triangular part of	C
				    is to be referenced.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   C := alpha*A*A**T + beta*C.

		TRANS = 'T' or 't'   C := alpha*A**T*A + beta*C.


   N
  N is INTEGER On entry, N specifies the order of the matrix C. N must be at
  least zero.

   K
  K is INTEGER On entry with TRANS = 'N' or 'n', K specifies the number of
  columns of the matrix A, and on entry with TRANS = 'T' or 't', K specifies
  the number of rows of the matrix A. K must be at least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha.

   A
  A is COMPLEX array, dimension ( LDA, ka ), where ka is k when TRANS = 'N' or
  'n', and is n otherwise.  Before entry with TRANS = 'N' or 'n', the leading
  n by k part of the array A must contain the matrix A, otherwise the leading
  k by n part of the array A must contain the matrix A.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When TRANS = 'N' or 'n' then LDA must be at
  least max( 1, n ), otherwise LDA must be at least max( 1, k ).

   BETA
  BETA is COMPLEX On entry, BETA specifies the scalar beta.

   C
  C is COMPLEX array, dimension ( LDC, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array C must contain
  the upper triangular part of the symmetric matrix and the strictly lower
  triangular part of C is not referenced. On exit, the upper triangular part
  of the array C is overwritten by the upper triangular part of the updated
  matrix.  Before entry with UPLO = 'L' or 'l', the leading n by n lower
  triangular part of the array C must contain the lower triangular part of the
  symmetric matrix and the strictly upper triangular part of C is not
  referenced. On exit, the lower triangular part of the array C is overwritten
  by the lower triangular part of the updated matrix.

   LDC
  LDC is INTEGER On entry, LDC specifies the first dimension of C as declared
  in the calling (sub) program. LDC must be at least max( 1, n ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			csyrk(3m_blas)
ctbmv(3m_blas)							ctbmv(3m_blas)



NAME
  ctbmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a triangular band
  matrix.


SYNOPSIS
  subroutine ctbmv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,k,lda,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTBMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular band matrix, with ( k + 1 ) diagonals.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is COMPLEX array, dimension ( LDA, N ).  Before entry with UPLO = 'U' or
  'u', the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.
  On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctbmv(3m_blas)
ctbsv(3m_blas)							ctbsv(3m_blas)



NAME
  ctbsv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a
  triangular band matrix.


SYNOPSIS
  subroutine ctbsv(uplo,trans,diag,n,k,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,k,lda,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTBSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular band matrix, with ( k + 1 ) diagonals.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   K
  K is INTEGER On entry with UPLO = 'U' or 'u', K specifies the number of
  super-diagonals of the matrix A.  On entry with UPLO = 'L' or 'l', K
  specifies the number of sub-diagonals of the matrix A.  K must satisfy 0
  .le. K.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading ( k + 1 ) by n part of the array A must contain the upper
  triangular band part of the matrix of coefficients, supplied column by
  column, with the leading diagonal of the matrix in row ( k + 1 ) of the
  array, the first super-diagonal starting at position 2 in row k, and so on.
  The top left k by k triangle of the array A is not referenced.  The
  following program segment will transfer an upper triangular band matrix from
  conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = K + 1 - J
		      DO 10, I = MAX( 1, J - K ), J
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Before entry with UPLO = 'L' or 'l', the leading ( k + 1 ) by n part of the
  array A must contain the lower triangular band part of the matrix of
  coefficients, supplied column by column, with the leading diagonal of the
  matrix in row 1 of the array, the first sub-diagonal starting at position 1
  in row 2, and so on. The bottom right k by k triangle of the array A is not
  referenced.  The following program segment will transfer a lower triangular
  band matrix from conventional full matrix storage to band storage:

		   DO 20, J = 1, N
		      M = 1 - J
		      DO 10, I = J, MIN( N, J + K )
			 A( M + I, J ) = matrix( I, J )

    10
      CONTINUE 20 CONTINUE

  Note that when DIAG = 'U' or 'u' the elements of the array A corresponding
  to the diagonal elements of the matrix are not referenced, but are assumed
  to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least ( k + 1 ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element right-hand
  side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctbsv(3m_blas)
ctpmv(3m_blas)							ctpmv(3m_blas)



NAME
  ctpmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a packed triangular
  band matrix.


SYNOPSIS
  subroutine ctpmv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: ap(*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTPMV
    performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix, supplied in packed form.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is COMPLEX array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 ) respectively, and
  so on.  Before entry with UPLO = 'L' or 'l', the array AP must contain the
  lower triangular matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 )
  respectively, and so on.  Note that when DIAG = 'U' or 'u', the diagonal
  elements of A are not referenced, but are assumed to be unity.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.
  On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctpmv(3m_blas)
ctpsv(3m_blas)							ctpsv(3m_blas)



NAME
  ctpsv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a
  packed triangular band matrix.


SYNOPSIS
  subroutine ctpsv(uplo,trans,diag,n,ap,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: ap(*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTPSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix, supplied in packed form.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   AP
  AP is COMPLEX array, dimension at least ( ( n*( n + 1 ) )/2 ).  Before entry
  with UPLO = 'U' or 'u', the array AP must contain the upper triangular
  matrix packed sequentially, column by column, so that AP( 1 ) contains a( 1,
  1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) and a( 2, 2 ) respectively, and
  so on.  Before entry with UPLO = 'L' or 'l', the array AP must contain the
  lower triangular matrix packed sequentially, column by column, so that AP( 1
  ) contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) and a( 3, 1 )
  respectively, and so on.  Note that when DIAG = 'U' or 'u', the diagonal
  elements of A are not referenced, but are assumed to be unity.

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element right-hand
  side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctpsv(3m_blas)
ctrmm(3m_blas)							ctrmm(3m_blas)



NAME
  ctrmm(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] B:=A*B or B:=B*A, A triangular, B
  rectangular.


SYNOPSIS
  subroutine ctrmm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	integer,intent(in)    :: lda,ldb,m,n
	character,intent(in)  :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: b(ldb,*)
	..


DEFINITION
  CTRMM performs one of the matrix-matrix operations

      B := alpha*op( A )*B,   or   B := alpha*B*op( A )

  where alpha is a scalar, B is an m by n matrix, A is a unit, or non-unit,
  upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T   or   op( A ) = A**H.


OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) multiplies B
  from the left or right as follows:

		SIDE = 'L' or 'l'   B := alpha*op( A )*B.

		SIDE = 'R' or 'r'   B := alpha*B*op( A ).


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**H.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha. When alpha is
  zero then A is not referenced and B need not be set before entry.

   A
  A is COMPLEX array, dimension ( LDA, k ), where k is m when SIDE = 'L' or
  'l' and is n when SIDE = 'R' or 'r'.	Before entry with UPLO = 'U' or 'u',
  the leading k by k upper triangular part of the array A must contain the
  upper triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading k by k lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is COMPLEX array, dimension ( LDB, N ).  Before entry, the leading m by n
  part of the array B must contain the matrix B, and on exit is overwritten by
  the transformed matrix.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctrmm(3m_blas)
crotg(3m_blas)							crotg(3m_blas)



NAME
  crotg(3f) - [BLAS:SINGLE_BLAS_LEVEL1] Generate a hermitian Given's rotation.


SYNOPSIS
  subroutine CROTG( a, b, c, s )

       .. Scalar Arguments ..
	  complex(wp),intent(inout) :: a
	  complex(wp),intent(in)    :: b
	  real(wp),intent(out)	    :: c
	  complex(wp),intent(out)   :: s


DESCRIPTION
  CROTG constructs a plane rotation

       [  c	    s ] [ a ] = [ r ]
       [ -conjg(s)  c ] [ b ]	[ 0 ]

  where c is real, s ic complex, and c**2 + conjg(s)*s = 1.

  The computation uses the formulas

      |x| = sqrt( Re(x)**2 + Im(x)**2 )
      sgn(x) = x / |x|	if x /= 0
	     = 1	if x  = 0
      c = |a| / sqrt(|a|**2 + |b|**2)
      s = sgn(a) * conjg(b) / sqrt(|a|**2 + |b|**2)

  When a and b are real and r /= 0, the formulas simplify to

      r = sgn(a)*sqrt(|a|**2 + |b|**2)
      c = a / r
      s = b / r

  the same as in CROTG when |a| > |b|. When |b| >= |a|, the sign of c and s
  will be different from those computed by CROTG if the signs of a and b are
  not the same.

OPTIONS
  A On entry, the scalar a. On exit, the scalar r.

  B The scalar b.

  C The scalar c.

  S The scalar s.

AUTHORS
  •  Edward Anderson, Lockheed Martin

CONTRIBUTORS
  •  Weslley Pereira, University of Colorado Denver, USA

FURTHER DETAILS
  Anderson E. (2017) Algorithm 978: Safe Scaling in the Level 1 BLAS ACM Trans
  Math Softw 44:1--28 https://doi.org/10.1145/3061665

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			crotg(3m_blas)
cscal(3m_blas)							cscal(3m_blas)



NAME
  cscal(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] scales a vector by a constant.
  CX:=CA*CX (complex multiplier)


SYNOPSIS
  subroutine cscal(n,ca,cx,incx)

	.. Scalar Arguments ..
	complex,intent(in)    :: ca
	integer,intent(in)    :: incx,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: cx(*)
	..


DEFINITION
  CSCAL scales a vector by a constant.

OPTIONS
   N
  number of elements in input vector(s)

   CA
  On entry, CA specifies the scalar alpha.

   CX
  CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  storage spacing between elements of CX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cscal(3m_blas)
csrot(3m_blas)							csrot(3m_blas)



NAME
  csrot(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] Applies a real Given's rotation to
  complex vectors.


SYNOPSIS
  subroutine csrot( n, cx, incx, cy, incy, c, s )

	.. Scalar Arguments ..
	integer,intent(in)	 :: incx, incy, n
	real,intent(in) 	 :: c, s
	..
	.. Array Arguments ..
	complex,intent(inout)	 :: cx( * ), cy( * )
	..


DEFINITION
  CSROT applies a plane rotation, where the cos and sin (c and s) are real and
  the vectors cx and cy are complex.  jack dongarra, linpack, 3/11/78.

OPTIONS
   N
  N is INTEGER On entry, N specifies the order of the vectors cx and cy.  N
  must be at least zero.

   CX
  CX is COMPLEX array, dimension at least ( 1 + ( N - 1 )*abs( INCX ) ).
  Before entry, the incremented array CX must contain the n element vector cx.
  On exit, CX is overwritten by the updated vector cx.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  CX. INCX must not be zero.

   CY
  CY is COMPLEX array, dimension at least ( 1 + ( N - 1 )*abs( INCY ) ).
  Before entry, the incremented array CY must contain the n element vector cy.
  On exit, CY is overwritten by the updated vector cy.

   INCY
  INCY is INTEGER On entry, INCY specifies the increment for the elements of
  CY. INCY must not be zero.

   C
  C is REAL On entry, C specifies the cosine, cos.

   S
  S is REAL On entry, S specifies the sine, sin.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			csrot(3m_blas)
csscal(3m_blas) 					       csscal(3m_blas)



NAME
  csscal(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] CSSCAL scales a complex vector by a
  real constant.  CX:=SA*CX (real multiplier).


SYNOPSIS
  subroutine csscal(n,sa,cx,incx)

	.. scalar arguments ..
	real,intent(in)       :: sa
	integer,intent(in)    :: incx,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: cx(*)
	..


DEFINITION
  CSSCAL scales a complex vector by a real constant.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SA
  SA is REAL On entry, SA specifies the scalar alpha.

   CX
  CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of CX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       csscal(3m_blas)
cswap(3m_blas)							cswap(3m_blas)



NAME
  cswap(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] Interchange vectors CX and CY.


SYNOPSIS
  subroutine cswap(n,cx,incx,cy,incy)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,incy,n
	..
	.. Array Arguments ..
	complex,intent(inout) :: cx(*),cy(*)
	..


DEFINITION
  CSWAP interchanges two vectors.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   CX
  CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of CX

   CY
  CY is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of CY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			cswap(3m_blas)
ctrmv(3m_blas)							ctrmv(3m_blas)



NAME
  ctrmv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := A*CX, A is a triangular matrix.


SYNOPSIS
  subroutine ctrmv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,lda,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTRMV performs one of the matrix-vector operations

      x := A*x,   or   x := A**T*x,   or   x := A**H*x,

  where x is an n element vector and A is an n by n unit, or non-unit, upper
  or lower triangular matrix.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the operation to be performed
  as follows:

		TRANS = 'N' or 'n'   x := A*x.

		TRANS = 'T' or 't'   x := A**T*x.

		TRANS = 'C' or 'c'   x := A**H*x.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is COMPLEX array, dimension ( LDA, N ).  Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array A must contain
  the upper triangular matrix and the strictly lower triangular part of A is
  not referenced.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element vector x.
  On exit, X is overwritten with the transformed vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.  The vector and matrix arguments are not referenced
  when N = 0, or M = 0

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctrmv(3m_blas)
ctrsm(3m_blas)							ctrsm(3m_blas)



NAME
  ctrsm(3f) - [BLAS:COMPLEX_BLAS_LEVEL3] B:=INVERSE(A)*C or B:=C*INVERSE(A),
  B, C rectangular, A triangular.


SYNOPSIS
  subroutine ctrsm(side,uplo,transa,diag,m,n,alpha,a,lda,b,ldb)

	.. Scalar Arguments ..
	complex,intent(in)    :: alpha
	integer,intent(in)    :: lda,ldb,m,n
	character,intent(in)  :: diag,side,transa,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: b(ldb,*)
	..


DEFINITION
  CTRSM solves one of the matrix equations

      op( A )*X = alpha*B,   or   X*op( A ) = alpha*B,

  where alpha is a scalar, X and B are m by n matrices, A is a unit, or non-
  unit, upper or lower triangular matrix and op( A ) is one of

      op( A ) = A   or	 op( A ) = A**T   or   op( A ) = A**H.

  The matrix X is overwritten on B.

OPTIONS
   SIDE
  SIDE is CHARACTER*1 On entry, SIDE specifies whether op( A ) appears on the
  left or right of X as follows:

		SIDE = 'L' or 'l'   op( A )*X = alpha*B.

		SIDE = 'R' or 'r'   X*op( A ) = alpha*B.


   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix A is an
  upper or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANSA
  TRANSA is CHARACTER*1 On entry, TRANSA specifies the form of op( A ) to be
  used in the matrix multiplication as follows:

		TRANSA = 'N' or 'n'   op( A ) = A.

		TRANSA = 'T' or 't'   op( A ) = A**T.

		TRANSA = 'C' or 'c'   op( A ) = A**H.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   M
  M is INTEGER On entry, M specifies the number of rows of B. M must be at
  least zero.

   N
  N is INTEGER On entry, N specifies the number of columns of B. N must be at
  least zero.

   ALPHA
  ALPHA is COMPLEX On entry, ALPHA specifies the scalar alpha. When alpha is
  zero then A is not referenced and B need not be set before entry.

   A
  A is COMPLEX array, dimension ( LDA, k ), where k is m when SIDE = 'L' or
  'l' and k is n when SIDE = 'R' or 'r'.  Before entry with UPLO = 'U' or 'u',
  the leading k by k upper triangular part of the array A must contain the
  upper triangular matrix and the strictly lower triangular part of A is not
  referenced.  Before entry with UPLO = 'L' or 'l', the leading k by k lower
  triangular part of the array A must contain the lower triangular matrix and
  the strictly upper triangular part of A is not referenced.  Note that when
  DIAG = 'U' or 'u', the diagonal elements of A are not referenced either, but
  are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. When SIDE = 'L' or 'l' then LDA must be at
  least max( 1, m ), when SIDE = 'R' or 'r' then LDA must be at least max( 1,
  n ).

   B
  B is COMPLEX array, dimension ( LDB, N ) Before entry, the leading m by n
  part of the array B must contain the right-hand side matrix B, and on exit
  is overwritten by the solution matrix X.

   LDB
  LDB is INTEGER On entry, LDB specifies the first dimension of B as declared
  in the calling (sub) program. LDB must be at least max( 1, m ).

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 3 Blas routine.

  -- Written on 8-February-1989.  Jack Dongarra, Argonne National Laboratory.
  Iain Duff, AERE Harwell.  Jeremy Du Croz, Numerical Algorithms Group Ltd.
  Sven Hammarling, Numerical Algorithms Group Ltd.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctrsm(3m_blas)
ctrsv(3m_blas)							ctrsv(3m_blas)



NAME
  ctrsv(3f) - [BLAS:COMPLEX_BLAS_LEVEL2] CX := INVERSE(A)*CX, where A is a
  triangular matrix.


SYNOPSIS
  subroutine ctrsv(uplo,trans,diag,n,a,lda,x,incx)

	.. Scalar Arguments ..
	integer,intent(in)    :: incx,lda,n
	character,intent(in)  :: diag,trans,uplo
	..
	.. Array Arguments ..
	complex,intent(in)    :: a(lda,*)
	complex,intent(inout) :: x(*)
	..


DEFINITION
  CTRSV solves one of the systems of equations

      A*x = b,	 or   A**T*x = b,   or	 A**H*x = b,

  where b and x are n element vectors and A is an n by n unit, or non-unit,
  upper or lower triangular matrix.

  No test for singularity or near-singularity is included in this routine.
  Such tests must be performed before calling this routine.

OPTIONS
   UPLO
  UPLO is CHARACTER*1 On entry, UPLO specifies whether the matrix is an upper
  or lower triangular matrix as follows:

		UPLO = 'U' or 'u'   A is an upper triangular matrix.

		UPLO = 'L' or 'l'   A is a lower triangular matrix.


   TRANS
  TRANS is CHARACTER*1 On entry, TRANS specifies the equations to be solved as
  follows:

		TRANS = 'N' or 'n'   A*x = b.

		TRANS = 'T' or 't'   A**T*x = b.

		TRANS = 'C' or 'c'   A**H*x = b.


   DIAG
  DIAG is CHARACTER*1 On entry, DIAG specifies whether or not A is unit
  triangular as follows:

		DIAG = 'U' or 'u'   A is assumed to be unit triangular.

		DIAG = 'N' or 'n'   A is not assumed to be unit
				    triangular.


   N
  N is INTEGER On entry, N specifies the order of the matrix A.  N must be at
  least zero.

   A
  A is COMPLEX array, dimension ( LDA, N ) Before entry with UPLO = 'U' or
  'u', the leading n by n upper triangular part of the array A must contain
  the upper triangular matrix and the strictly lower triangular part of A is
  not referenced.  Before entry with UPLO = 'L' or 'l', the leading n by n
  lower triangular part of the array A must contain the lower triangular
  matrix and the strictly upper triangular part of A is not referenced.  Note
  that when DIAG = 'U' or 'u', the diagonal elements of A are not referenced
  either, but are assumed to be unity.

   LDA
  LDA is INTEGER On entry, LDA specifies the first dimension of A as declared
  in the calling (sub) program. LDA must be at least max( 1, n ).

   X
  X is COMPLEX array, dimension at least ( 1 + ( n - 1 )*abs( INCX ) ).
  Before entry, the incremented array X must contain the n element right-hand
  side vector b. On exit, X is overwritten with the solution vector x.

   INCX
  INCX is INTEGER On entry, INCX specifies the increment for the elements of
  X. INCX must not be zero.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


   FURTHER DETAILS
  Level 2 Blas routine.

  -- Written on 22-October-1986.  Jack Dongarra, Argonne National Lab.	Jeremy
  Du Croz, Nag Central Office.	Sven Hammarling, Nag Central Office.  Richard
  Hanson, Sandia National Labs.

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			ctrsv(3m_blas)
dasum(3m_blas)							dasum(3m_blas)



NAME
  dasum(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] takes the sum of the absolute values.


SYNOPSIS
  double precision function dasum(n,dx,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,n
	..
	.. Array Arguments ..
	double precision,intent(in) :: dx(*)
	..


DEFINITION
  DASUM takes the sum of the absolute values.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dasum(3m_blas)
daxpy(3m_blas)							daxpy(3m_blas)



NAME
  daxpy(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] constant times a vector plus a vector.


SYNOPSIS
  subroutine daxpy(n,da,dx,incx,dy,incy)

	.. Scalar Arguments ..
	double precision,intent(in)    :: da
	integer,intent(in)	       :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(in)    :: dx(*)
	double precision,intent(inout) :: dy(*)
	..


DEFINITION
  DAXPY constant times a vector plus a vector.	uses unrolled loops for
  increments equal to one.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DA
  DA is DOUBLE PRECISION On entry, DA specifies the scalar alpha.

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of DY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			daxpy(3m_blas)
dcabs1(3m_blas) 					       dcabs1(3m_blas)



NAME
  dcabs1(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] DCABS1 computes |Re(.)| + |Im(.)| of
  a double complex number


SYNOPSIS
  double precision function dcabs1(z)

	.. Scalar Arguments ..
	complex(kind=real64),intent(in) ::  Z
	..


DEFINITION
  DCABS1 computes |Re(.)| + |Im(.)| of a double complex number

OPTIONS
   Z
  Z is complex(kind=real64)

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       dcabs1(3m_blas)
dcopy(3m_blas)							dcopy(3m_blas)



NAME
  dcopy(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] copies elements of a vector, x, to a
  vector, y.


SYNOPSIS
  subroutine dcopy(n,dx,incx,dy,incy)

	.. Scalar Arguments ..
	integer,intent(in)	     :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(in)  :: dx(*)
	double precision,intent(out) :: dy(*)
	..


DEFINITION
  DCOPY copies a vector, x, to a vector, y.  uses unrolled loops for
  increments equal to 1.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of DY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			dcopy(3m_blas)
ddot(3m_blas)							 ddot(3m_blas)



NAME
  ddot(3f) - [BLAS:DOUBLE_BLAS_LEVEL1] forms the dot product of two vectors.


SYNOPSIS
  double precision function ddot(n,dx,incx,dy,incy)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,incy,n
	..
	.. Array Arguments ..
	double precision,intent(in) :: dx(*),dy(*)
	..


DEFINITION
  DDOT forms the dot product of two vectors.  uses unrolled loops for
  increments equal to one.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

   DY
  DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )

   INCY
  INCY is INTEGER storage spacing between elements of DY

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 12/3/93, array(1) declarations
  changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			 ddot(3m_blas)
icamax(3m_blas) 					       icamax(3m_blas)



NAME
  icamax(3f) -- [BLAS:AUX_BLAS] Return index of maximum "absolute value" in
  CX.


SYNOPSIS
  integer function icamax(n,cx,incx)

	.. scalar arguments ..
	integer,intent(in) :: incx,n
	..
	.. array arguments ..
	complex,intent(in) :: cx(*)
	..


DEFINITION
  ICAMAX finds the index of the first element having maximum |Re(.)| + |Im(.)|

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   CX
  CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of CX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       icamax(3m_blas)
idamax(3m_blas) 					       idamax(3m_blas)



NAME
  idamax(3f) - [BLAS:AUX_BLAS]


SYNOPSIS
  integer function idamax(n,dx,incx)

	.. Scalar Arguments ..
	integer,intent(in)	    :: incx,n
	..
	.. Array Arguments ..
	double precision,intent(in) :: dx(*)
	..


DEFINITION
  IDAMAX finds the index of the first element having maximum absolute value.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   DX
  DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of DX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       idamax(3m_blas)
isamax(3m_blas) 					       isamax(3m_blas)



NAME
  isamax(3f) - [BLAS:AUX_BLAS] Return index of maximum absolute value in SX.


SYNOPSIS
  integer function isamax(n,sx,incx)

	.. Scalar Arguments ..
	integer,intent(in) :: incx,n
	..
	.. Array Arguments ..
	real,intent(in) :: sx(*)
	..


DEFINITION
  ISAMAX finds the index of the first element having maximum absolute value.

OPTIONS
   N
  N is INTEGER number of elements in input vector(s)

   SX
  SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

   INCX
  INCX is INTEGER storage spacing between elements of SX

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, linpack, 3/11/78.  modified 3/93 to return if incx .le. 0.
  modified 12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       isamax(3m_blas)
izamax(3m_blas) 					       izamax(3m_blas)



NAME
  izamax(3f) - [BLAS:AUX_BLAS]


SYNOPSIS
  integer function izamax(n,zx,incx)

	.. Scalar Arguments ..
	integer,intent(in)		:: incx,n
	..
	.. Array Arguments ..
	complex(kind=real64),intent(in) :: zx(*)
	..


DEFINITION
  IZAMAX finds the index of the first element having maximum |Re(.)|

  •  |Im(.)|

OPTIONS
  N number of elements in input vector(s)

  ZX
    array, dimension ( 1 + ( N - 1 )*abs( INCX ) )

  INCX
    storage spacing between elements of ZX

RETURNS
  IZAMAX
    index of the first element having maximum

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:November 2017


   FURTHER DETAILS
  jack dongarra, 1/15/85.  modified 3/93 to return if incx .le. 0.  modified
  12/3/93, array(1) declarations changed to array(*)

SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023		       izamax(3m_blas)
lsame(3m_blas)							lsame(3m_blas)



NAME
  lsame(3f) - [BLAS:AUX_BLAS] compare two letters ignoring case


SYNOPSIS
  logical function lsame(ca,cb)

	.. Scalar Arguments ..
	character(len=1),intent(in) :: ca,cb
	..


DEFINITION
  LSAME returns .TRUE. if CA is the same letter as CB regardless of case.

OPTIONS
   CA
  CA is CHARACTER*1

   CB
  CB is CHARACTER*1 CA and CB specify the single characters to be compared.

AUTHORS
  •  Univ. of Tennessee

  •  Univ. of California Berkeley

  •  Univ. of Colorado Denver

  •  NAG Ltd.

   date:December 2016


SEE ALSO
  Online html documentation available at http://www.netlib.org/lapack/explore-
  html/



				 July 20, 2023			lsame(3m_blas)
blas(3) 			    LAPACK			       blas(3)



NAME
       blas - Reference BLAS

SYNOPSIS
   Module procedures
       Level1
       Level2
       Level3
       Auxiliary BLAS
       Testing

Detailed Description
       This is the group of BLAS routines.

Author
   Files
       file caxpy.f
       file ccopy.f
       file cdotc.f
       file cdotu.f
       file cgbmv.f
       file cgemm.f
       file cgemv.f
       file cgerc.f
       file cgeru.f
       file chbmv.f
       file chemm.f
       file chemv.f
       file cher.f
       file cher2.f
       file cher2k.f
       file cherk.f
       file chpmv.f
       file chpr.f
       file chpr2.f
       file cscal.f
       file csrot.f
       file csscal.f
       file cswap.f
       file csymm.f
       file csyr2k.f
       file csyrk.f
       file ctbmv.f
       file ctbsv.f
       file ctpmv.f
       file ctpsv.f
       file ctrmm.f
       file ctrmv.f
       file ctrsm.f
       file ctrsv.f
       file dasum.f
       file daxpy.f
       file dcabs1.f
       file dcopy.f
       file ddot.f
       file dgbmv.f
       file dgemm.f
       file dgemv.f
       file dger.f
       file drot.f
       file drotm.f
       file drotmg.f
       file dsbmv.f
       file dscal.f
       file dsdot.f
       file dspmv.f
       file dspr.f
       file dspr2.f
       file dswap.f
       file dsymm.f
       file dsymv.f
       file dsyr.f
       file dsyr2.f
       file dsyr2k.f
       file dsyrk.f
       file dtbmv.f
       file dtbsv.f
       file dtpmv.f
       file dtpsv.f
       file dtrmm.f
       file dtrmv.f
       file dtrsm.f
       file dtrsv.f
       file dzasum.f
       file icamax.f
       file idamax.f
       file isamax.f
       file izamax.f
       file lsame.f
       file sasum.f
       file saxpy.f
       file scabs1.f
       file scasum.f
       file scopy.f
       file sdot.f
       file sdsdot.f
       file sgbmv.f
       file sgemm.f
       file sgemv.f
       file sger.f
       file srot.f
       file srotm.f
       file srotmg.f
       file ssbmv.f
       file sscal.f
       file sspmv.f
       file sspr.f
       file sspr2.f
       file sswap.f
       file ssymm.f
       file ssymv.f
       file ssyr.f
       file ssyr2.f
       file ssyr2k.f
       file ssyrk.f
       file stbmv.f
       file stbsv.f
       file stpmv.f
       file stpsv.f
       file strmm.f
       file strmv.f
       file strsm.f
       file strsv.f
       file BLAS/SRC/xerbla.f
       file BLAS/SRC/xerbla_array.f
       file zaxpy.f
       file zcopy.f
       file zdotc.f
       file zdotu.f
       file zdrot.f
       file zdscal.f
       file zgbmv.f
       file zgemm.f
       file zgemv.f
       file zgerc.f
       file zgeru.f
       file zhbmv.f
       file zhemm.f
       file zhemv.f
       file zher.f
       file zher2.f
       file zher2k.f
       file zherk.f
       file zhpmv.f
       file zhpr.f
       file zhpr2.f
       file zscal.f
       file zswap.f
       file zsymm.f
       file zsyr2k.f
       file zsyrk.f
       file ztbmv.f
       file ztbsv.f
       file ztpmv.f
       file ztpsv.f
       file ztrmm.f
       file ztrmv.f
       file ztrsm.f
       file ztrsv.f



Version 3.10.0			Mon Jun 28 2021 		       blas(3)
