$BLOCK COMMENT --file sdot.3m_blas.man
NAME
   sdot.(3f) -- [BLAS:SINGLE_BLAS_LEVEL1]

SYNOPSIS
    REAL FUNCTION SDOT(N,SX,INCX,SY,INCY)

      .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,INCY,N
      ..
      .. Array Arguments ..
      REAL,intent(in) :: SX(*),SY(*)
      ..

DEFINITION

    SDOT forms the dot product of two vectors.
    uses unrolled loops for increments equal to one.
 
OPTIONS

  N
 
          N is INTEGER
         number of elements in input vector(s)
 
  SX
 
          SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
 
  INCX
 
          INCX is INTEGER
         storage spacing between elements of SX
 
  SY
 
          SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
 
  INCY
 
          INCY is INTEGER
         storage spacing between elements of SY
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, linpack, 3/11/78.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
pure REAL FUNCTION SDOT(N,SX,INCX,SY,INCY)
implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,INCY,N
!     ..
!     .. Array Arguments ..
      REAL,intent(in) :: SX(*),SY(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      REAL STEMP
      INTEGER I,IX,IY,M,MP1
!     ..
!     .. Intrinsic Functions ..
      INTRINSIC MOD
!     ..
      STEMP = 0.0e0
      SDOT = 0.0e0
      IF (N.LE.0) RETURN
      IF (INCX.EQ.1 .AND. INCY.EQ.1) THEN
!
!        code for both increments equal to 1
!
!
!        clean-up loop
!
         M = MOD(N,5)
         IF (M.NE.0) THEN
            DO I = 1,M
               STEMP = STEMP + SX(I)*SY(I)
            enddo
            IF (N.LT.5) THEN
               SDOT=STEMP
            RETURN
            endif
         endif
         MP1 = M + 1
         DO I = MP1,N,5
          STEMP = STEMP + SX(I)*SY(I) + SX(I+1)*SY(I+1) + SX(I+2)*SY(I+2) + SX(I+3)*SY(I+3) + SX(I+4)*SY(I+4)
         enddo
      ELSE
!
!        code for unequal increments or equal increments
!          not equal to 1
!
         IX = 1
         IY = 1
         IF (INCX.LT.0) IX = (-N+1)*INCX + 1
         IF (INCY.LT.0) IY = (-N+1)*INCY + 1
         DO I = 1,N
            STEMP = STEMP + SX(IX)*SY(IY)
            IX = IX + INCX
            IY = IY + INCY
         enddo
      endif
      SDOT = STEMP

END FUNCTION SDOT
