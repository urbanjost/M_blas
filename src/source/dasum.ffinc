$BLOCK COMMENT --file dasum.3m_blas.man
NAME
   dasum.(3f) -- [BLAS:DOUBLE_BLAS_LEVEL1]

SYNOPSIS
    DOUBLE PRECISION FUNCTION DASUM(N,DX,INCX)

      .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,N
      ..
      .. Array Arguments ..
      DOUBLE PRECISION,intent(in) :: DX(*)
      ..

DEFINITION

    DASUM takes the sum of the absolute values.
 
OPTIONS

  N
 
          N is INTEGER
         number of elements in input vector(s)
 
  DX
 
          DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
 
  INCX
 
          INCX is INTEGER
         storage spacing between elements of DX
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, linpack, 3/11/78.
     modified 3/93 to return if incx .le. 0.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
pure double precision function dasum(n,dx,incx)
      implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,N
!     ..
!     .. Array Arguments ..
      DOUBLE PRECISION,intent(in) :: DX(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      DOUBLE PRECISION DTEMP
      INTEGER I,M,MP1,NINCX
!     ..
!     .. Intrinsic Functions ..
      INTRINSIC DABS,MOD
!     ..
      DASUM = 0.0d0
      DTEMP = 0.0d0
      IF (N.LE.0 .OR. INCX.LE.0) RETURN
      IF (INCX.EQ.1) THEN
!        code for increment equal to 1
!
!
!        clean-up loop
!
         M = MOD(N,6)
         IF (M.NE.0) THEN
            DO I = 1,M
               DTEMP = DTEMP + DABS(DX(I))
            ENDDO
            IF (N.LT.6) THEN
               DASUM = DTEMP
               RETURN
            endif
         endif
         MP1 = M + 1
         DO I = MP1,N,6
            DTEMP = DTEMP + DABS(DX(I)) + DABS(DX(I+1)) + DABS(DX(I+2)) + DABS(DX(I+3)) + DABS(DX(I+4)) + DABS(DX(I+5))
         ENDDO
      ELSE
!
!        code for increment not equal to 1
!
         NINCX = N*INCX
         DO I = 1,NINCX,INCX
            DTEMP = DTEMP + DABS(DX(I))
         ENDDO
      endif
      DASUM = DTEMP

      END FUNCTION DASUM
