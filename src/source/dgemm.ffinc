$BLOCK COMMENT --file dgemm.3m_blas.man
NAME
   dgemm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]

SYNOPSIS
    SUBROUTINE DGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)

      .. Scalar Arguments ..
      DOUBLE PRECISION,intent(in)    :: ALPHA,BETA
      INTEGER,intent(in)             :: K,LDA,LDB,LDC,M,N
      CHARACTER,intent(in)           :: TRANSA,TRANSB
      ..
      .. Array Arguments ..
      DOUBLE PRECISION,intent(in)    :: A(LDA,*),B(LDB,*)
      DOUBLE PRECISION,intent(inout) :: C(LDC,*)
      ..

DEFINITION

 DGEMM performs one of the matrix-matrix operations

    C := alpha*op( A )*op( B ) + beta*C,

 where op( X ) is one of

    op( X ) = X   or   op( X ) = X**T,

 alpha and beta are scalars, and A, B and C are matrices, with op( A )
 an m by k matrix, op( B ) a k by n matrix and C an m by n matrix.
 
OPTIONS

  TRANSA
 
          TRANSA is CHARACTER*1
           On entry, TRANSA specifies the form of op( A ) to be used in
           the matrix multiplication as follows:

              TRANSA = 'N' or 'n',  op( A ) = A.

              TRANSA = 'T' or 't',  op( A ) = A**T.

              TRANSA = 'C' or 'c',  op( A ) = A**T.
 
  TRANSB
 
          TRANSB is CHARACTER*1
           On entry, TRANSB specifies the form of op( B ) to be used in
           the matrix multiplication as follows:

              TRANSB = 'N' or 'n',  op( B ) = B.

              TRANSB = 'T' or 't',  op( B ) = B**T.

              TRANSB = 'C' or 'c',  op( B ) = B**T.
 
  M
 
          M is INTEGER
           On entry, M specifies the number of rows of the matrix
           op( A ) and of the matrix C. M must be at least zero.
 
  N
 
          N is INTEGER
           On entry, N specifies the number of columns of the matrix
           op( B ) and the number of columns of the matrix C. N must be
           at least zero.
 
  K
 
          K is INTEGER
           On entry, K specifies the number of columns of the matrix
           op( A ) and the number of rows of the matrix op( B ). K must
           be at least zero.
 
  ALPHA
 
          ALPHA is DOUBLE PRECISION.
           On entry, ALPHA specifies the scalar alpha.
 
  A
 
          A is DOUBLE PRECISION array, dimension ( LDA, ka ), where ka is
           k when TRANSA = 'N' or 'n', and is m otherwise.
           Before entry with TRANSA = 'N' or 'n', the leading m by k
           part of the array A must contain the matrix A, otherwise
           the leading k by m part of the array A must contain the
           matrix A.
 
  LDA
 
          LDA is INTEGER
           On entry, LDA specifies the first dimension of A as declared
           in the calling (sub) program. When TRANSA = 'N' or 'n' then
           LDA must be at least max( 1, m ), otherwise LDA must be at
           least max( 1, k ).
 
  B
 
          B is DOUBLE PRECISION array, dimension ( LDB, kb ), where kb is
           n when TRANSB = 'N' or 'n', and is k otherwise.
           Before entry with TRANSB = 'N' or 'n', the leading k by n
           part of the array B must contain the matrix B, otherwise
           the leading n by k part of the array B must contain the
           matrix B.
 
  LDB
 
          LDB is INTEGER
           On entry, LDB specifies the first dimension of B as declared
           in the calling (sub) program. When TRANSB = 'N' or 'n' then
           LDB must be at least max( 1, k ), otherwise LDB must be at
           least max( 1, n ).
 
  BETA
 
          BETA is DOUBLE PRECISION.
           On entry, BETA specifies the scalar beta. When BETA is
           supplied as zero then C need not be set on input.
 
 C
 
          C is DOUBLE PRECISION array, dimension ( LDC, N )
           Before entry, the leading m by n part of the array C must
           contain the matrix C, except when beta is zero, in which
           case C need not be set on entry.
           On exit, the array C is overwritten by the m by n matrix
           ( alpha*op( A )*op( B ) + beta*C ).
 
  LDC
 
          LDC is INTEGER
           On entry, LDC specifies the first dimension of C as declared
           in the calling (sub) program. LDC must be at least
           max( 1, m ).
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:December 2016

 FURTHER DETAILS

  Level 3 Blas routine.

  -- Written on 8-February-1989.
     Jack Dongarra, Argonne National Laboratory.
     Iain Duff, AERE Harwell.
     Jeremy Du Croz, Numerical Algorithms Group Ltd.
     Sven Hammarling, Numerical Algorithms Group Ltd.
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
       subroutine dgemm(transa,transb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc)
      implicit none
!
!  -- Reference BLAS level3 routine (version 3.7.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     December 2016
!
!     .. Scalar Arguments ..
      double precision,intent(in)    :: alpha,beta
      integer,intent(in)             :: k,lda,ldb,ldc,m,n
      character,intent(in)           :: transa,transb
!     ..
!     .. Array Arguments ..
      double precision,intent(in)    :: a(lda,*),b(ldb,*)
      double precision,intent(inout) :: c(ldc,*)
!     ..
!
!  =====================================================================
!
!     .. External Functions ..
!     ..
!     .. External Subroutines ..
!     ..
!     .. Intrinsic Functions ..
      intrinsic max
!     ..
!     .. Local Scalars ..
      double precision temp
      integer i,info,j,l,nrowa,nrowb
      logical nota,notb
!     ..
!     .. Parameters ..
      double precision one,zero
      parameter (one=1.0d+0,zero=0.0d+0)
!     ..
!
!     Set  NOTA  and  NOTB  as  true if  A  and  B  respectively are not
!     transposed and set  NROWA and NROWB  as the number of rows of  A
!     and  B  respectively.
!
      nota = lsame(transa,'N')
      notb = lsame(transb,'N')
      if (nota) then
          nrowa = m
      else
          nrowa = k
      endif
      if (notb) then
          nrowb = k
      else
          nrowb = n
      endif
!
!     Test the input parameters.
!
      info = 0
      if ((.not.nota) .and. (.not.lsame(transa,'C')) .and.  (.not.lsame(transa,'T'))) then
          info = 1
      else if ((.not.notb) .and. (.not.lsame(transb,'C')) .and.  (.not.lsame(transb,'T'))) then
          info = 2
      else if (m.lt.0) then
          info = 3
      else if (n.lt.0) then
          info = 4
      else if (k.lt.0) then
          info = 5
      else if (lda.lt.max(1,nrowa)) then
          info = 8
      else if (ldb.lt.max(1,nrowb)) then
          info = 10
      else if (ldc.lt.max(1,m)) then
          info = 13
      endif
      if (info.ne.0) then
          call xerbla('DGEMM ',info)
          return
      endif
!
!     Quick return if possible.
!
      if ((m.eq.0) .or. (n.eq.0) .or.  (((alpha.eq.zero).or. (k.eq.0)).and. (beta.eq.one))) return
!
!     And if  alpha.eq.zero.
!
      if (alpha.eq.zero) then
          if (beta.eq.zero) then
              do j = 1,n
                  c(1:m,j) = zero
              enddo
          else
              do j = 1,n
                  c(1:m,j) = beta*c(1:m,j)
              enddo
          endif
          return
      endif
!
!     Start the operations.
!
      if (notb) then
          if (nota) then
!
!           Form  C := alpha*A*B + beta*C.
!
              do j = 1,n
                  if (beta.eq.zero) then
                      c(1:m,j) = zero
                  else if (beta.ne.one) then
                      c(1:m,j) = beta*c(1:m,j)
                  endif
                  do l = 1,k
                      temp = alpha*b(l,j)
                      do i = 1,m
                          c(i,j) = c(i,j) + temp*a(i,l)
                      enddo
                  enddo
              enddo
          else
!
!           Form  C := alpha*A**T*B + beta*C
!
              do j = 1,n
                  do i = 1,m
                      temp = zero
                      do l = 1,k
                          temp = temp + a(l,i)*b(l,j)
                      enddo
                      if (beta.eq.zero) then
                          c(i,j) = alpha*temp
                      else
                          c(i,j) = alpha*temp + beta*c(i,j)
                      endif
                  enddo
              enddo
          endif
      else
          if (nota) then
!
!           Form  C := alpha*A*B**T + beta*C
!
              do j = 1,n
                  if (beta.eq.zero) then
                      do i = 1,m
                          c(i,j) = zero
                      enddo
                  else if (beta.ne.one) then
                      do i = 1,m
                          c(i,j) = beta*c(i,j)
                      enddo
                  endif
                  do l = 1,k
                      temp = alpha*b(j,l)
                      do i = 1,m
                          c(i,j) = c(i,j) + temp*a(i,l)
                      enddo
                  enddo
              enddo
          else
!
!           Form  C := alpha*A**T*B**T + beta*C
!
              do j = 1,n
                  do i = 1,m
                      temp = zero
                      do l = 1,k
                          temp = temp + a(l,i)*b(j,l)
                      enddo
                      if (beta.eq.zero) then
                          c(i,j) = alpha*temp
                      else
                          c(i,j) = alpha*temp + beta*c(i,j)
                      endif
                  enddo
              enddo
          endif
      endif
!
      end subroutine dgemm
