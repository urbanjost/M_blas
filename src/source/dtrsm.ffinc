$BLOCK COMMENT --file dtrsm.3m_blas.man
NAME
   dtrsm(3f) - [BLAS:DOUBLE_BLAS_LEVEL3]

SYNOPSIS
    SUBROUTINE DTRSM(SIDE,UPLO,TRANSA,DIAG,M,N,ALPHA,A,LDA,B,LDB)

      .. Scalar Arguments ..
      DOUBLE PRECISION,intent(in)    :: ALPHA
      INTEGER,intent(in)             :: LDA,LDB,M,N
      CHARACTER,intent(in)           :: DIAG,SIDE,TRANSA,UPLO
      ..
      .. Array Arguments ..
      DOUBLE PRECISION,intent(in)    :: A(LDA,*)
      DOUBLE PRECISION,intent(inout) :: B(LDB,*)
      ..

DEFINITION

 DTRSM solves one of the matrix equations

    op( A )*X = alpha*B,   or   X*op( A ) = alpha*B,

 where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 non-unit, upper or lower triangular matrix and op( A ) is one of

    op( A ) = A   or   op( A ) = A**T.

 The matrix X is overwritten on B.
 
OPTIONS

  SIDE
 
          SIDE is CHARACTER*1
           On entry, SIDE specifies whether op( A ) appears on the left
           or right of X as follows:

              SIDE = 'L' or 'l'   op( A )*X = alpha*B.

              SIDE = 'R' or 'r'   X*op( A ) = alpha*B.
 
  UPLO
 
          UPLO is CHARACTER*1
           On entry, UPLO specifies whether the matrix A is an upper or
           lower triangular matrix as follows:

              UPLO = 'U' or 'u'   A is an upper triangular matrix.

              UPLO = 'L' or 'l'   A is a lower triangular matrix.
 
  TRANSA
 
          TRANSA is CHARACTER*1
           On entry, TRANSA specifies the form of op( A ) to be used in
           the matrix multiplication as follows:

              TRANSA = 'N' or 'n'   op( A ) = A.

              TRANSA = 'T' or 't'   op( A ) = A**T.

              TRANSA = 'C' or 'c'   op( A ) = A**T.
 
  DIAG
 
          DIAG is CHARACTER*1
           On entry, DIAG specifies whether or not A is unit triangular
           as follows:

              DIAG = 'U' or 'u'   A is assumed to be unit triangular.

              DIAG = 'N' or 'n'   A is not assumed to be unit
                                  triangular.
 
  M
 
          M is INTEGER
           On entry, M specifies the number of rows of B. M must be at
           least zero.
 
  N
 
          N is INTEGER
           On entry, N specifies the number of columns of B. N must be
           at least zero.
 
  ALPHA
 
          ALPHA is DOUBLE PRECISION.
           On entry, ALPHA specifies the scalar alpha. When alpha is
           zero then A is not referenced and B need not be set before
           entry.
 
  A
 
          A is DOUBLE PRECISION array, dimension ( LDA, k ),

           where k is m when SIDE = 'L' or 'l'
             and k is n when SIDE = 'R' or 'r'.

           Before entry with UPLO = 'U' or 'u', the leading k by k
           upper triangular part of the array A must contain the upper
           triangular matrix and the strictly lower triangular part of
           A is not referenced.

           Before entry with UPLO = 'L' or 'l', the leading k by k
           lower triangular part of the array A must contain the lower
           triangular matrix and the strictly upper triangular part of
           A is not referenced.

           Note that when DIAG = 'U' or 'u', the diagonal elements of
           A are not referenced either, but are assumed to be unity.
 
  LDA
           On entry, LDA specifies the first dimension of A as declared
           in the calling (sub) program. When SIDE = 'L' or 'l' then
           LDA must be at least max( 1, m ), when SIDE = 'R' or 'r'
           then LDA must be at least max( 1, n ).
 
 B
           Before entry, the leading m by n part of the array B must
           contain the right-hand side matrix B, and on exit is
           overwritten by the solution matrix X.
 
  LDB
           On entry, LDB specifies the first dimension of B as declared
           in the calling (sub) program. LDB must be at least
           max( 1, m ).
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:December 2016

 FURTHER DETAILS

  Level 3 Blas routine.

  -- Written on 8-February-1989.
     Jack Dongarra, Argonne National Laboratory.
     Iain Duff, AERE Harwell.
     Jeremy Du Croz, Numerical Algorithms Group Ltd.
     Sven Hammarling, Numerical Algorithms Group Ltd.
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
       SUBROUTINE DTRSM(SIDE,UPLO,TRANSA,DIAG,M,N,ALPHA,A,LDA,B,LDB)
      implicit none
!
!  -- Reference BLAS level3 routine (version 3.7.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     December 2016
!
!     .. Scalar Arguments ..
      DOUBLE PRECISION,intent(in)    :: ALPHA
      INTEGER,intent(in)             :: LDA,LDB,M,N
      CHARACTER,intent(in)           :: DIAG,SIDE,TRANSA,UPLO
!     ..
!     .. Array Arguments ..
      DOUBLE PRECISION,intent(in)    :: A(LDA,*)
      DOUBLE PRECISION,intent(inout) :: B(LDB,*)
!     ..
!
!  =====================================================================
!
!     .. External Functions ..
!     ..
!     .. External Subroutines ..
!     ..
!     .. Intrinsic Functions ..
      INTRINSIC MAX
!     ..
!     .. Local Scalars ..
      DOUBLE PRECISION TEMP
      INTEGER I,INFO,J,K,NROWA
      LOGICAL LSIDE,NOUNIT,UPPER
!     ..
!     .. Parameters ..
      DOUBLE PRECISION ONE,ZERO
      PARAMETER (ONE=1.0D+0,ZERO=0.0D+0)
!     ..
!
!     Test the input parameters.
!
      LSIDE = LSAME(SIDE,'L')
      IF (LSIDE) THEN
          NROWA = M
      ELSE
          NROWA = N
      endif
      NOUNIT = LSAME(DIAG,'N')
      UPPER = LSAME(UPLO,'U')
!
      INFO = 0
      IF ((.NOT.LSIDE) .AND. (.NOT.LSAME(SIDE,'R'))) THEN
          INFO = 1
      ELSEIF ((.NOT.UPPER) .AND. (.NOT.LSAME(UPLO,'L'))) THEN
          INFO = 2
      ELSEIF ((.NOT.LSAME(TRANSA,'N')) .AND.  (.NOT.LSAME(TRANSA,'T')) .AND.  (.NOT.LSAME(TRANSA,'C'))) THEN
          INFO = 3
      ELSEIF ((.NOT.LSAME(DIAG,'U')) .AND. (.NOT.LSAME(DIAG,'N'))) THEN
          INFO = 4
      ELSEIF (M.LT.0) THEN
          INFO = 5
      ELSEIF (N.LT.0) THEN
          INFO = 6
      ELSEIF (LDA.LT.MAX(1,NROWA)) THEN
          INFO = 9
      ELSEIF (LDB.LT.MAX(1,M)) THEN
          INFO = 11
      endif
      IF (INFO.NE.0) THEN
          CALL XERBLA('DTRSM ',INFO)
          RETURN
      endif
!
!     Quick return if possible.
!
      IF (M.EQ.0 .OR. N.EQ.0) RETURN
!
!     And when  alpha.eq.zero.
!
      IF (ALPHA.EQ.ZERO) THEN
              B(1:M,1:N) = ZERO
          RETURN
      endif
!
!     Start the operations.
!
      IF (LSIDE) THEN
          IF (LSAME(TRANSA,'N')) THEN
!
!           Form  B := alpha*inv( A )*B.
!
              IF (UPPER) THEN
                  DO J = 1,N
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,J) = ALPHA*B(1:M,J)
                      endif
                      DO K = M,1,-1
                          IF (B(K,J).NE.ZERO) THEN
                              IF (NOUNIT) B(K,J) = B(K,J)/A(K,K)
                              DO I = 1,K - 1
                                  B(I,J) = B(I,J) - B(K,J)*A(I,K)
                              enddo
                          endif
                      enddo
                  enddo
              ELSE
                  DO J = 1,N
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,J) = ALPHA*B(1:M,J)
                      endif
                      DO K = 1,M
                          IF (B(K,J).NE.ZERO) THEN
                              IF (NOUNIT) B(K,J) = B(K,J)/A(K,K)
                              DO I = K + 1,M
                                  B(I,J) = B(I,J) - B(K,J)*A(I,K)
                              enddo
                          endif
                      enddo
                  enddo
              endif
          ELSE
!
!           Form  B := alpha*inv( A**T )*B.
!
              IF (UPPER) THEN
                  DO J = 1,N
                      DO I = 1,M
                          TEMP = ALPHA*B(I,J)
                          DO K = 1,I - 1
                              TEMP = TEMP - A(K,I)*B(K,J)
                          enddo
                          IF (NOUNIT) TEMP = TEMP/A(I,I)
                          B(I,J) = TEMP
                      enddo
                  enddo
              ELSE
                  DO J = 1,N
                      DO I = M,1,-1
                          TEMP = ALPHA*B(I,J)
                          DO K = I + 1,M
                              TEMP = TEMP - A(K,I)*B(K,J)
                          enddo
                          IF (NOUNIT) TEMP = TEMP/A(I,I)
                          B(I,J) = TEMP
                      enddo
                  enddo
              endif
          endif
      ELSE
          IF (LSAME(TRANSA,'N')) THEN
!
!           Form  B := alpha*B*inv( A ).
!
              IF (UPPER) THEN
                  DO J = 1,N
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,J) = ALPHA*B(1:M,J)
                      endif
                      DO K = 1,J - 1
                          IF (A(K,J).NE.ZERO) THEN
                              B(1:M,J) = B(1:M,J) - A(K,J)*B(1:M,K)
                          endif
                      enddo
                      IF (NOUNIT) THEN
                          TEMP = ONE/A(J,J)
                          B(1:M,J) = TEMP*B(1:M,J)
                      endif
                  enddo
              ELSE
                  DO J = N,1,-1
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,J) = ALPHA*B(1:M,J)
                      endif
                      DO K = J + 1,N
                          IF (A(K,J).NE.ZERO) THEN
                              B(1:M,J) = B(1:M,J) - A(K,J)*B(1:M,K)
                          endif
                      enddo
                      IF (NOUNIT) THEN
                          TEMP = ONE/A(J,J)
                          B(1:M,J) = TEMP*B(1:M,J)
                      endif
                  enddo
              endif
          ELSE
!
!           Form  B := alpha*B*inv( A**T ).
!
              IF (UPPER) THEN
                  DO K = N,1,-1
                      IF (NOUNIT) THEN
                          TEMP = ONE/A(K,K)
                          B(1:M,K) = TEMP*B(1:M,K)
                      endif
                      DO J = 1,K - 1
                          IF (A(J,K).NE.ZERO) THEN
                              TEMP = A(J,K)
                              B(1:M,J) = B(1:M,J) - TEMP*B(1:M,K)
                          endif
                      enddo
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,K) = ALPHA*B(1:M,K)
                      endif
                  enddo
              ELSE
                  DO K = 1,N
                      IF (NOUNIT) THEN
                          TEMP = ONE/A(K,K)
                          B(1:M,K) = TEMP*B(1:M,K)
                      endif
                      DO J = K + 1,N
                          IF (A(J,K).NE.ZERO) THEN
                              TEMP = A(J,K)
                              B(1:M,J) = B(1:M,J) - TEMP*B(1:M,K)
                          endif
                      enddo
                      IF (ALPHA.NE.ONE) THEN
                          B(1:M,K) = ALPHA*B(1:M,K)
                      endif
                  enddo
              endif
          endif
      endif
!
      END SUBROUTINE DTRSM
