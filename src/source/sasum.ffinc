$BLOCK COMMENT --file sasum.3m_blas.man
NAME
   sasum(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SASUM:=sum of absolute values of SX.

SYNOPSIS
    REAL FUNCTION SASUM(N,SX,INCX)

      .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,N
      ..
      .. Array Arguments ..
      REAL,intent(in) :: SX(*)
      ..

DEFINITION

    SASUM takes the sum of the absolute values.
    uses unrolled loops for increment equal to one.
 
OPTIONS

  N
 
          N is INTEGER
         number of elements in input vector(s)
 
  SX
 
          SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
 
  INCX
 
          INCX is INTEGER
         storage spacing between elements of SX
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, linpack, 3/11/78.
     modified 3/93 to return if incx .le. 0.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
pure REAL FUNCTION SASUM(N,SX,INCX)
implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      INTEGER,intent(in) :: INCX,N
!     ..
!     .. Array Arguments ..
      REAL,intent(in) :: SX(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      REAL STEMP
      INTEGER I,M,MP1,NINCX
!     ..
!     .. Intrinsic Functions ..
      INTRINSIC ABS,MOD
!     ..
      SASUM = 0.0e0
      STEMP = 0.0e0
      IF (N.LE.0 .OR. INCX.LE.0) RETURN
      IF (INCX.EQ.1) THEN
!        code for increment equal to 1
!
!
!        clean-up loop
!
         M = MOD(N,6)
         IF (M.NE.0) THEN
            DO I = 1,M
               STEMP = STEMP + ABS(SX(I))
            enddo
            IF (N.LT.6) THEN
               SASUM = STEMP
               RETURN
            endif
         endif
         MP1 = M + 1
         DO I = MP1,N,6
            STEMP = STEMP + ABS(SX(I)) + ABS(SX(I+1)) + ABS(SX(I+2)) + ABS(SX(I+3)) + ABS(SX(I+4)) + ABS(SX(I+5))
         enddo
      ELSE
!
!        code for increment not equal to 1
!
         NINCX = N*INCX
         DO I = 1,NINCX,INCX
            STEMP = STEMP + ABS(SX(I))
         enddo
      endif
      SASUM = STEMP

END FUNCTION SASUM
