$BLOCK COMMENT --file saxpy.3m_blas.man
NAME
   saxpy(3f) - [BLAS:SINGLE_BLAS_LEVEL1] SY:=SY+SA*SX (constant times a vector plus a vector)

SYNOPSIS
    subroutine saxpy(n,sa,sx,incx,sy,incy)

      .. Scalar Arguments ..
      real,intent(in)     :: sa
      integer,intent(in)  :: incx,incy,n
      ..
      .. Array Arguments ..
      real,intent(in)     :: sx(*)
      real,intent(inout)  :: sy(*)
      ..

DEFINITION

    SAXPY constant times a vector plus a vector.
    uses unrolled loops for increments equal to one.
 
OPTIONS
  N
         number of elements in input vector(s)
  SA
         On entry, SA specifies the scalar alpha.
  SX
         SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
  INCX
         storage spacing between elements of SX
  SY
         SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
  INCY
         storage spacing between elements of SY
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, linpack, 3/11/78.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
       subroutine saxpy(n,sa,sx,incx,sy,incy)
      implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      real,intent(in)     :: sa
      integer,intent(in)  :: incx,incy,n
!     ..
!     .. Array Arguments ..
      real,intent(in)     :: sx(*)
      real,intent(inout)  :: sy(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      integer i,ix,iy,m,mp1
!     ..
!     .. Intrinsic Functions ..
      intrinsic mod
!     ..
      if (n.le.0) return
      if (sa.eq.0.0) return
      if (incx.eq.1 .and. incy.eq.1) then
!
!        code for both increments equal to 1
!
!
!        clean-up loop
!
         m = mod(n,4)
         if (m.ne.0) then
            do i = 1,m
               sy(i) = sy(i) + sa*sx(i)
            enddo
         endif
         if (n.lt.4) return
         mp1 = m + 1
         do i = mp1,n,4
            sy(i) = sy(i) + sa*sx(i)
            sy(i+1) = sy(i+1) + sa*sx(i+1)
            sy(i+2) = sy(i+2) + sa*sx(i+2)
            sy(i+3) = sy(i+3) + sa*sx(i+3)
         enddo
      else
!
!        code for unequal increments or equal increments
!          not equal to 1
!
         ix = 1
         iy = 1
         if (incx.lt.0) ix = (-n+1)*incx + 1
         if (incy.lt.0) iy = (-n+1)*incy + 1
         do i = 1,n
          sy(iy) = sy(iy) + sa*sx(ix)
          ix = ix + incx
          iy = iy + incy
         enddo
      endif

      end subroutine saxpy
