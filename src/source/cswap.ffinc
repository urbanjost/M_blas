$BLOCK COMMENT --file cswap.3m_blas.man
NAME
   cswap(3f) - [BLAS:COMPLEX_BLAS_LEVEL1] Interchange vectors CX and CY.

SYNOPSIS
    subroutine cswap(n,cx,incx,cy,incy)

      .. Scalar Arguments ..
      integer,intent(in)    :: incx,incy,n
      ..
      .. Array Arguments ..
      complex,intent(inout) :: cx(*),cy(*)
      ..

DEFINITION

   CSWAP interchanges two vectors.
 
OPTIONS

  N
 
          N is INTEGER
         number of elements in input vector(s)
 
 CX
 
          CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
 
  INCX
 
          INCX is INTEGER
         storage spacing between elements of CX
 
 CY
 
          CY is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
 
  INCY
 
          INCY is INTEGER
         storage spacing between elements of CY
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, linpack, 3/11/78.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
       subroutine cswap(n,cx,incx,cy,incy)
      implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      integer,intent(in)    :: incx,incy,n
!     ..
!     .. Array Arguments ..
      complex,intent(inout) :: cx(*),cy(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      complex ctemp
      integer i,ix,iy
!     ..
      if (n.le.0) return
      if (incx.eq.1 .and. incy.eq.1) then
!
!       code for both increments equal to 1
         do i = 1,n
            ctemp = cx(i)
            cx(i) = cy(i)
            cy(i) = ctemp
         enddo
      else
!
!       code for unequal increments or equal increments not equal
!         to 1
!
         ix = 1
         iy = 1
         if (incx.lt.0) ix = (-n+1)*incx + 1
         if (incy.lt.0) iy = (-n+1)*incy + 1
         do i = 1,n
            ctemp = cx(ix)
            cx(ix) = cy(iy)
            cy(iy) = ctemp
            ix = ix + incx
            iy = iy + incy
         enddo
      endif

      end subroutine cswap
