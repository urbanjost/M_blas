$BLOCK COMMENT --file zdotc.3m_blas.man
NAME
   zdotc(3f) - [BLAS:COMPLEX16_BLAS_LEVEL1]

SYNOPSIS
    complex(kind=real64) function zdotc(n,zx,incx,zy,incy)

      .. Scalar Arguments ..
      integer,intent(in) :: incx,incy,n
      ..
      .. Array Arguments ..
      complex(kind=real64),intent(in) :: zx(*),zy(*)
      ..

DEFINITION

 ZDOTC forms the dot product of two complex vectors
      ZDOTC = X^H * Y

OPTIONS

  N
 
          N is INTEGER
         number of elements in input vector(s)
 
  ZX
 
          ZX is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
 
  INCX
 
          INCX is INTEGER
         storage spacing between elements of ZX
 
  ZY
 
          ZY is complex(kind=real64) array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
 
  INCY
 
          INCY is INTEGER
         storage spacing between elements of ZY
 
AUTHORS

+ Univ. of Tennessee
+ Univ. of California Berkeley
+ Univ. of Colorado Denver
+ NAG Ltd.

 date:November 2017

 FURTHER DETAILS

     jack dongarra, 3/11/78.
     modified 12/3/93, array(1) declarations changed to array(*)
 
SEE ALSO
   Online html documentation available at
   http://www.netlib.org/lapack/explore-html/
$BLOCK END
!  =====================================================================
pure complex(kind=real64) function zdotc(n,zx,incx,zy,incy)
      implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      integer,intent(in) :: incx,incy,n
!     ..
!     .. Array Arguments ..
      complex(kind=real64),intent(in) :: zx(*),zy(*)
!     ..
!
!  =====================================================================
!
!     .. Local Scalars ..
      complex(kind=real64) :: ztemp
      integer i,ix,iy
!     ..
!     .. Intrinsic Functions ..
      intrinsic dconjg
!     ..
      ztemp = (0.0d0,0.0d0)
      zdotc = (0.0d0,0.0d0)
      if (n.le.0) return
      if (incx.eq.1 .and. incy.eq.1) then
!
!        code for both increments equal to 1
!
         do i = 1,n
            ztemp = ztemp + dconjg(zx(i))*zy(i)
         enddo
      else
!
!        code for unequal increments or equal increments
!          not equal to 1
!
         ix = 1
         iy = 1
         if (incx.lt.0) ix = (-n+1)*incx + 1
         if (incy.lt.0) iy = (-n+1)*incy + 1
         do i = 1,n
            ztemp = ztemp + dconjg(zx(ix))*zy(iy)
            ix = ix + incx
            iy = iy + incy
         enddo
      endif
      zdotc = ztemp

      end function zdotc
